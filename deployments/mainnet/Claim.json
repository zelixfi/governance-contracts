{
  "address": "0x5929cDDE7C7715D3E42F577E5CADcf2C2D246c52",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "daysToClaim",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Added",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "ChangedOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addTokenGrant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalTokens",
          "type": "uint256"
        }
      ],
      "name": "addTokenGrants",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "getTokenGrant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenGrants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf304b8e51bc86e1d105f6fbaa53236484a7d53aa7e8e176582bb4134da5c96ad",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x5929cDDE7C7715D3E42F577E5CADcf2C2D246c52",
    "transactionIndex": 0,
    "gasUsed": "1175017",
    "logsBloom": "0x
    "blockHash": "0x40359b88ff134c0db19aa92ee0874cfad7ceba9fb24351eaf0fb40f19709e424",
    "transactionHash": "0xf304b8e51bc86e1d105f6fbaa53236484a7d53aa7e8e176582bb4134da5c96ad",
    "logs": [],
    "blockNumber": 2920532,
    "cumulativeGasUsed": "1175017",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x59414b3089ce2AF0010e7523Dea7E2b35d776ec7",
    "30"
  ],
  "solcInputHash": "cbca27c4fdf8e9078ea5771556254fe0",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"daysToClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTokenGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"addTokenGrants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getTokenGrant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenGrants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The claim contract allows users to claim grants. Any unclaimed tokens may  be recovered by owner after a given deadline.\",\"kind\":\"dev\",\"methods\":{\"addTokenGrant(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens being granted\",\"recipient\":\"The address that is receiving the grant\"}},\"addTokenGrants(address[],uint256[],uint256)\":{\"params\":{\"amounts\":\"The amounts of tokens being granted\",\"recipients\":\"The addresses that are receiving grants\",\"totalTokens\":\"The total tokens being granted (checksum)\"}},\"changeOwner(address)\":{\"params\":{\"newOwner\":\"New owner address\"}},\"claim()\":{\"details\":\"Errors if no tokens are available\"},\"constructor\":{\"params\":{\"_token\":\"Address of YAK token\"}},\"getTokenGrant(address)\":{\"details\":\"Returns 0 if `deadline` is reached\",\"params\":{\"recipient\":\"The address that has a grant\"},\"returns\":{\"_0\":\"The amount recipient can claim\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}}},\"title\":\"Claim\",\"version\":1},\"userdoc\":{\"events\":{\"Added(address,uint256)\":{\"notice\":\"Event emitted when a new grant is created\"},\"ChangedOwner(address,address)\":{\"notice\":\"Event emitted when the owner of the vesting contract is updated\"},\"Claimed(address,uint256)\":{\"notice\":\"Event emitted when tokens are claimed by a recipient from a grant\"},\"Recovered(address,uint256)\":{\"notice\":\"Event emitted when tokens are recovered by owner\"}},\"kind\":\"user\",\"methods\":{\"addTokenGrant(address,uint256)\":{\"notice\":\"Add a new token grant\"},\"addTokenGrants(address[],uint256[],uint256)\":{\"notice\":\"Batch add new token grants\"},\"changeOwner(address)\":{\"notice\":\"Change owner of vesting contract\"},\"claim()\":{\"notice\":\"Allows a recipient to claim their tokens\"},\"constructor\":{\"notice\":\"Construct a new Claim contract\"},\"deadline()\":{\"notice\":\"Deadline to claim tokens\"},\"getTokenGrant(address)\":{\"notice\":\"Get token grant for recipient\"},\"owner()\":{\"notice\":\"Current owner of this contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"token()\":{\"notice\":\"YAK token\"},\"tokenGrants(address)\":{\"notice\":\"Mapping of recipient address > current token grant balance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Claim.sol\":\"Claim\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"contracts/Claim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @title Claim\\n * @dev The claim contract allows users to claim grants. Any unclaimed tokens may\\n *  be recovered by owner after a given deadline.\\n */\\ncontract Claim {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice YAK token\\n    IERC20 public token;\\n\\n    /// @notice Deadline to claim tokens\\n    uint256 public deadline;\\n    \\n    /// @notice Mapping of recipient address > current token grant balance\\n    mapping (address => uint256) public tokenGrants;\\n\\n    /// @notice Current owner of this contract\\n    address public owner;\\n\\n    /// @notice Event emitted when a new grant is created\\n    event Added(address indexed recipient, uint256 indexed amount);\\n    \\n    /// @notice Event emitted when tokens are claimed by a recipient from a grant\\n    event Claimed(address indexed recipient, uint256 indexed amountClaimed);\\n\\n    /// @notice Event emitted when tokens are recovered by owner\\n    event Recovered(address token, uint256 amount);\\n    \\n    /// @notice Event emitted when the owner of the vesting contract is updated\\n    event ChangedOwner(address indexed oldOwner, address indexed newOwner);\\n\\n    /**\\n     * @notice Construct a new Claim contract\\n     * @param _token Address of YAK token\\n     */\\n    constructor(address _token, uint256 daysToClaim) {\\n        require(_token != address(0), \\\"Claim::constructor: must be valid token address\\\");\\n        token = IERC20(_token);\\n        owner = msg.sender;\\n        deadline = block.timestamp.add(daysToClaim.mul(86400));\\n    }\\n    \\n    /**\\n     * @notice Add a new token grant\\n     * @param recipient The address that is receiving the grant\\n     * @param amount The amount of tokens being granted\\n     */\\n    function addTokenGrant(\\n        address recipient,\\n        uint256 amount\\n    ) \\n        external\\n    {\\n        require(block.timestamp < deadline, \\\"Claim::addTokenGrant: too late\\\");\\n        require(msg.sender == owner, \\\"Claim::addTokenGrant: not owner\\\");\\n        require(amount > 0, \\\"Claim::addTokenGrant: zero grant\\\");\\n        \\n        token.safeTransferFrom(owner, address(this), amount);\\n\\n        tokenGrants[recipient] = tokenGrants[recipient].add(amount);\\n        emit Added(recipient, amount);\\n    }\\n    \\n    /**\\n     * @notice Batch add new token grants\\n     * @param recipients The addresses that are receiving grants\\n     * @param amounts The amounts of tokens being granted\\n     * @param totalTokens The total tokens being granted (checksum)\\n     */\\n    function addTokenGrants(\\n        address[] calldata recipients,\\n        uint256[] calldata amounts,\\n        uint256 totalTokens\\n    ) \\n        external\\n    {\\n        require(block.timestamp < deadline, \\\"Claim::addTokenGrants: too late\\\");\\n        require(msg.sender == owner, \\\"Claim::addTokenGrants: not owner\\\");\\n        require(recipients.length == amounts.length, \\\"Claim::addTokenGrants: different lengths\\\");\\n        \\n        token.safeTransferFrom(owner, address(this), totalTokens);\\n\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            totalTokens = totalTokens.sub(amounts[i]);\\n            tokenGrants[recipients[i]] = tokenGrants[recipients[i]].add(amounts[i]);\\n            emit Added(recipients[i], amounts[i]);\\n        }\\n\\n        require(totalTokens == 0, \\\"Claim::addTokenGrants: wrong output\\\");\\n    }\\n\\n    /**\\n     * @notice Get token grant for recipient\\n     * @dev Returns 0 if `deadline` is reached\\n     * @param recipient The address that has a grant\\n     * @return The amount recipient can claim\\n     */\\n    function getTokenGrant(address recipient) public view returns(uint256){\\n        if (block.timestamp < deadline) {\\n            return tokenGrants[recipient];\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Allows a recipient to claim their tokens\\n     * @dev Errors if no tokens are available\\n     */\\n    function claim() external {\\n        uint256 availableToClaim = getTokenGrant(msg.sender);\\n        require(availableToClaim > 0, \\\"Claim::claim: availableToClaim is 0\\\");\\n\\n        tokenGrants[msg.sender] = 0;\\n        \\n        token.safeTransfer(msg.sender, availableToClaim);\\n        emit Claimed(msg.sender, availableToClaim);\\n    }\\n\\n    /**\\n     * @notice Change owner of vesting contract\\n     * @param newOwner New owner address\\n     */\\n    function changeOwner(address newOwner) \\n        external\\n    {\\n        require(msg.sender == owner, \\\"Claim::changeOwner: not owner\\\");\\n        require(newOwner != address(0) && newOwner != address(this) && newOwner != address(token), \\\"Claim::changeOwner: not valid address\\\");\\n\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        emit ChangedOwner(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external {\\n        require(msg.sender == owner, \\\"Claim::recoverERC20: not owner\\\");\\n        require(block.timestamp >= deadline, \\\"Claim::recoverERC20: too early\\\");\\n        require(tokenAmount > 0, \\\"Claim::recoverERC20: amount is 0\\\");\\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n}\",\"keccak256\":\"0xe9444aa1b0789fea5956fb991509c2d44cb47dcfc6b330ad2854d07d3162c6a6\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x3200dad4899dfc4a7b22d84e4b3768f23f50fd161c5b5997d6ae7004d90b0a94\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xf5c6f7a4e202733b9bea8dc0c4be4bc16f765c08079418eb426ad490d9f4142e\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200150738038062001507833981810160405260408110156200003757600080fd5b5080516020909101516001600160a01b038216620000875760405162461bcd60e51b815260040180806020018281038252602f815260200180620014b7602f913960400191505060405180910390fd5b600080546001600160a01b03199081166001600160a01b0385161790915560038054339216919091179055620000e6620000d18262015180620000f2602090811b62000c2a17901c565b426200015960201b62000c8c1790919060201c565b60015550620001b49050565b600082620001035750600062000153565b828202828482816200011157fe5b0414620001505760405162461bcd60e51b8152600401808060200182810382526021815260200180620014e66021913960400191505060405180910390fd5b90505b92915050565b60008282018381101562000150576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6112f380620001c46000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063b81a4d8f1161005b578063b81a4d8f14610279578063b8ad2abe146102ac578063fc0c546a146102e5576100be565b80638da5cb5b14610215578063a6f9dae114610246576100be565b8063376d3b8f116100a7578063376d3b8f146101a15780634e71d92d146101d45780638980f11f146101dc576100be565b8063178b638e146100c357806329dcb0cf14610187575b600080fd5b610185600480360360608110156100d957600080fd5b8101906020810181356401000000008111156100f457600080fd5b82018360208201111561010657600080fd5b8035906020019184602083028401116401000000008311171561012857600080fd5b91939092909160208101903564010000000081111561014657600080fd5b82018360208201111561015857600080fd5b8035906020019184602083028401116401000000008311171561017a57600080fd5b9193509150356102ed565b005b61018f61060c565b60408051918252519081900360200190f35b61018f600480360360208110156101b757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610612565b610185610653565b610185600480360360408110156101f257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610705565b61021d610899565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101856004803603602081101561025c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108b5565b61018f6004803603602081101561028f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a35565b610185600480360360408110156102c257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610a47565b61021d610c0e565b6001544210610343576040805162461bcd60e51b815260206004820152601f60248201527f436c61696d3a3a616464546f6b656e4772616e74733a20746f6f206c61746500604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff1633146103af576040805162461bcd60e51b815260206004820181905260248201527f436c61696d3a3a616464546f6b656e4772616e74733a206e6f74206f776e6572604482015290519081900360640190fd5b8382146103ed5760405162461bcd60e51b81526004018080602001828103825260288152602001806112966028913960400191505060405180910390fd5b6003546000546104189173ffffffffffffffffffffffffffffffffffffffff91821691163084610ce6565b60005b848110156105c75761044884848381811061043257fe5b9050602002013583610d8190919063ffffffff16565b91506104d684848381811061045957fe5b905060200201356002600089898681811061047057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c8c90919063ffffffff16565b600260008888858181106104e657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083838281811061054d57fe5b9050602002013586868381811061056057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f446e00ad56f9b887844f390c87a128507b991ea0499375f13ecb115288c2df7d60405160405180910390a360010161041b565b5080156106055760405162461bcd60e51b81526004018080602001828103825260238152602001806112056023913960400191505060405180910390fd5b5050505050565b60015481565b600060015442101561064a575073ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205461064e565b5060005b919050565b600061065e33610612565b90506000811161069f5760405162461bcd60e51b81526004018080602001828103825260238152602001806112496023913960400191505060405180910390fd5b336000818152600260205260408120819055546106d59173ffffffffffffffffffffffffffffffffffffffff9091169083610dc3565b604051819033907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a90600090a350565b60035473ffffffffffffffffffffffffffffffffffffffff163314610771576040805162461bcd60e51b815260206004820152601e60248201527f436c61696d3a3a7265636f76657245524332303a206e6f74206f776e65720000604482015290519081900360640190fd5b6001544210156107c8576040805162461bcd60e51b815260206004820152601e60248201527f436c61696d3a3a7265636f76657245524332303a20746f6f206561726c790000604482015290519081900360640190fd5b6000811161081d576040805162461bcd60e51b815260206004820181905260248201527f436c61696d3a3a7265636f76657245524332303a20616d6f756e742069732030604482015290519081900360640190fd5b6003546108449073ffffffffffffffffffffffffffffffffffffffff848116911683610dc3565b6040805173ffffffffffffffffffffffffffffffffffffffff841681526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a15050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff163314610921576040805162461bcd60e51b815260206004820152601d60248201527f436c61696d3a3a6368616e67654f776e65723a206e6f74206f776e6572000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81161580159061095c575073ffffffffffffffffffffffffffffffffffffffff81163014155b8015610983575060005473ffffffffffffffffffffffffffffffffffffffff828116911614155b6109be5760405162461bcd60e51b81526004018080602001828103825260258152602001806111e06025913960400191505060405180910390fd5b6003805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e90600090a35050565b60026020526000908152604090205481565b6001544210610a9d576040805162461bcd60e51b815260206004820152601e60248201527f436c61696d3a3a616464546f6b656e4772616e743a20746f6f206c6174650000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff163314610b09576040805162461bcd60e51b815260206004820152601f60248201527f436c61696d3a3a616464546f6b656e4772616e743a206e6f74206f776e657200604482015290519081900360640190fd5b60008111610b5e576040805162461bcd60e51b815260206004820181905260248201527f436c61696d3a3a616464546f6b656e4772616e743a207a65726f206772616e74604482015290519081900360640190fd5b600354600054610b899173ffffffffffffffffffffffffffffffffffffffff91821691163084610ce6565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902054610bb99082610c8c565b73ffffffffffffffffffffffffffffffffffffffff831660008181526002602052604080822093909355915183927f446e00ad56f9b887844f390c87a128507b991ea0499375f13ecb115288c2df7d91a35050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600082610c3957506000610c86565b82820282848281610c4657fe5b0414610c835760405162461bcd60e51b81526004018080602001828103825260218152602001806112286021913960400191505060405180910390fd5b90505b92915050565b600082820183811015610c83576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610d7b908590610e55565b50505050565b6000610c8383836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250610f13565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e50908490610e55565b505050565b6060610eb7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610faf9092919063ffffffff16565b805190915015610e5057808060200190516020811015610ed657600080fd5b5051610e505760405162461bcd60e51b815260040180806020018281038252602a81526020018061126c602a913960400191505060405180910390fd5b60008184841115610fa25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610f67578181015183820152602001610f4f565b50505050905090810190601f168015610f945780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50508183035b9392505050565b6060610fbe8484600085610fc6565b949350505050565b6060824710156110075760405162461bcd60e51b81526004018080602001828103825260268152602001806111ba6026913960400191505060405180910390fd5b6110108561114d565b611061576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106110cb57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161108e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461112d576040519150601f19603f3d011682016040523d82523d6000602084013e611132565b606091505b5091509150611142828286611153565b979650505050505050565b3b151590565b60608315611162575081610fa8565b8251156111725782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315610f67578181015183820152602001610f4f56fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c436c61696d3a3a6368616e67654f776e65723a206e6f742076616c69642061646472657373436c61696d3a3a616464546f6b656e4772616e74733a2077726f6e67206f7574707574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436c61696d3a3a636c61696d3a20617661696c61626c65546f436c61696d20697320305361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436c61696d3a3a616464546f6b656e4772616e74733a20646966666572656e74206c656e67746873a2646970667358221220b8a7a0bf7ff70f13fdc9d4ec91a85912047373e003bdf7ced6862ac9d202d22c64736f6c63430007030033436c61696d3a3a636f6e7374727563746f723a206d7573742062652076616c696420746f6b656e2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063b81a4d8f1161005b578063b81a4d8f14610279578063b8ad2abe146102ac578063fc0c546a146102e5576100be565b80638da5cb5b14610215578063a6f9dae114610246576100be565b8063376d3b8f116100a7578063376d3b8f146101a15780634e71d92d146101d45780638980f11f146101dc576100be565b8063178b638e146100c357806329dcb0cf14610187575b600080fd5b610185600480360360608110156100d957600080fd5b8101906020810181356401000000008111156100f457600080fd5b82018360208201111561010657600080fd5b8035906020019184602083028401116401000000008311171561012857600080fd5b91939092909160208101903564010000000081111561014657600080fd5b82018360208201111561015857600080fd5b8035906020019184602083028401116401000000008311171561017a57600080fd5b9193509150356102ed565b005b61018f61060c565b60408051918252519081900360200190f35b61018f600480360360208110156101b757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610612565b610185610653565b610185600480360360408110156101f257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610705565b61021d610899565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101856004803603602081101561025c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108b5565b61018f6004803603602081101561028f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a35565b610185600480360360408110156102c257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610a47565b61021d610c0e565b6001544210610343576040805162461bcd60e51b815260206004820152601f60248201527f436c61696d3a3a616464546f6b656e4772616e74733a20746f6f206c61746500604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff1633146103af576040805162461bcd60e51b815260206004820181905260248201527f436c61696d3a3a616464546f6b656e4772616e74733a206e6f74206f776e6572604482015290519081900360640190fd5b8382146103ed5760405162461bcd60e51b81526004018080602001828103825260288152602001806112966028913960400191505060405180910390fd5b6003546000546104189173ffffffffffffffffffffffffffffffffffffffff91821691163084610ce6565b60005b848110156105c75761044884848381811061043257fe5b9050602002013583610d8190919063ffffffff16565b91506104d684848381811061045957fe5b905060200201356002600089898681811061047057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c8c90919063ffffffff16565b600260008888858181106104e657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083838281811061054d57fe5b9050602002013586868381811061056057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f446e00ad56f9b887844f390c87a128507b991ea0499375f13ecb115288c2df7d60405160405180910390a360010161041b565b5080156106055760405162461bcd60e51b81526004018080602001828103825260238152602001806112056023913960400191505060405180910390fd5b5050505050565b60015481565b600060015442101561064a575073ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205461064e565b5060005b919050565b600061065e33610612565b90506000811161069f5760405162461bcd60e51b81526004018080602001828103825260238152602001806112496023913960400191505060405180910390fd5b336000818152600260205260408120819055546106d59173ffffffffffffffffffffffffffffffffffffffff9091169083610dc3565b604051819033907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a90600090a350565b60035473ffffffffffffffffffffffffffffffffffffffff163314610771576040805162461bcd60e51b815260206004820152601e60248201527f436c61696d3a3a7265636f76657245524332303a206e6f74206f776e65720000604482015290519081900360640190fd5b6001544210156107c8576040805162461bcd60e51b815260206004820152601e60248201527f436c61696d3a3a7265636f76657245524332303a20746f6f206561726c790000604482015290519081900360640190fd5b6000811161081d576040805162461bcd60e51b815260206004820181905260248201527f436c61696d3a3a7265636f76657245524332303a20616d6f756e742069732030604482015290519081900360640190fd5b6003546108449073ffffffffffffffffffffffffffffffffffffffff848116911683610dc3565b6040805173ffffffffffffffffffffffffffffffffffffffff841681526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a15050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff163314610921576040805162461bcd60e51b815260206004820152601d60248201527f436c61696d3a3a6368616e67654f776e65723a206e6f74206f776e6572000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81161580159061095c575073ffffffffffffffffffffffffffffffffffffffff81163014155b8015610983575060005473ffffffffffffffffffffffffffffffffffffffff828116911614155b6109be5760405162461bcd60e51b81526004018080602001828103825260258152602001806111e06025913960400191505060405180910390fd5b6003805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e90600090a35050565b60026020526000908152604090205481565b6001544210610a9d576040805162461bcd60e51b815260206004820152601e60248201527f436c61696d3a3a616464546f6b656e4772616e743a20746f6f206c6174650000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff163314610b09576040805162461bcd60e51b815260206004820152601f60248201527f436c61696d3a3a616464546f6b656e4772616e743a206e6f74206f776e657200604482015290519081900360640190fd5b60008111610b5e576040805162461bcd60e51b815260206004820181905260248201527f436c61696d3a3a616464546f6b656e4772616e743a207a65726f206772616e74604482015290519081900360640190fd5b600354600054610b899173ffffffffffffffffffffffffffffffffffffffff91821691163084610ce6565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902054610bb99082610c8c565b73ffffffffffffffffffffffffffffffffffffffff831660008181526002602052604080822093909355915183927f446e00ad56f9b887844f390c87a128507b991ea0499375f13ecb115288c2df7d91a35050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600082610c3957506000610c86565b82820282848281610c4657fe5b0414610c835760405162461bcd60e51b81526004018080602001828103825260218152602001806112286021913960400191505060405180910390fd5b90505b92915050565b600082820183811015610c83576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610d7b908590610e55565b50505050565b6000610c8383836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250610f13565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e50908490610e55565b505050565b6060610eb7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610faf9092919063ffffffff16565b805190915015610e5057808060200190516020811015610ed657600080fd5b5051610e505760405162461bcd60e51b815260040180806020018281038252602a81526020018061126c602a913960400191505060405180910390fd5b60008184841115610fa25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610f67578181015183820152602001610f4f565b50505050905090810190601f168015610f945780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50508183035b9392505050565b6060610fbe8484600085610fc6565b949350505050565b6060824710156110075760405162461bcd60e51b81526004018080602001828103825260268152602001806111ba6026913960400191505060405180910390fd5b6110108561114d565b611061576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106110cb57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161108e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461112d576040519150601f19603f3d011682016040523d82523d6000602084013e611132565b606091505b5091509150611142828286611153565b979650505050505050565b3b151590565b60608315611162575081610fa8565b8251156111725782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315610f67578181015183820152602001610f4f56fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c436c61696d3a3a6368616e67654f776e65723a206e6f742076616c69642061646472657373436c61696d3a3a616464546f6b656e4772616e74733a2077726f6e67206f7574707574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436c61696d3a3a636c61696d3a20617661696c61626c65546f436c61696d20697320305361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436c61696d3a3a616464546f6b656e4772616e74733a20646966666572656e74206c656e67746873a2646970667358221220b8a7a0bf7ff70f13fdc9d4ec91a85912047373e003bdf7ced6862ac9d202d22c64736f6c63430007030033",
  "devdoc": {
    "details": "The claim contract allows users to claim grants. Any unclaimed tokens may  be recovered by owner after a given deadline.",
    "kind": "dev",
    "methods": {
      "addTokenGrant(address,uint256)": {
        "params": {
          "amount": "The amount of tokens being granted",
          "recipient": "The address that is receiving the grant"
        }
      },
      "addTokenGrants(address[],uint256[],uint256)": {
        "params": {
          "amounts": "The amounts of tokens being granted",
          "recipients": "The addresses that are receiving grants",
          "totalTokens": "The total tokens being granted (checksum)"
        }
      },
      "changeOwner(address)": {
        "params": {
          "newOwner": "New owner address"
        }
      },
      "claim()": {
        "details": "Errors if no tokens are available"
      },
      "constructor": {
        "params": {
          "_token": "Address of YAK token"
        }
      },
      "getTokenGrant(address)": {
        "details": "Returns 0 if `deadline` is reached",
        "params": {
          "recipient": "The address that has a grant"
        },
        "returns": {
          "_0": "The amount recipient can claim"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      }
    },
    "title": "Claim",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Added(address,uint256)": {
        "notice": "Event emitted when a new grant is created"
      },
      "ChangedOwner(address,address)": {
        "notice": "Event emitted when the owner of the vesting contract is updated"
      },
      "Claimed(address,uint256)": {
        "notice": "Event emitted when tokens are claimed by a recipient from a grant"
      },
      "Recovered(address,uint256)": {
        "notice": "Event emitted when tokens are recovered by owner"
      }
    },
    "kind": "user",
    "methods": {
      "addTokenGrant(address,uint256)": {
        "notice": "Add a new token grant"
      },
      "addTokenGrants(address[],uint256[],uint256)": {
        "notice": "Batch add new token grants"
      },
      "changeOwner(address)": {
        "notice": "Change owner of vesting contract"
      },
      "claim()": {
        "notice": "Allows a recipient to claim their tokens"
      },
      "constructor": {
        "notice": "Construct a new Claim contract"
      },
      "deadline()": {
        "notice": "Deadline to claim tokens"
      },
      "getTokenGrant(address)": {
        "notice": "Get token grant for recipient"
      },
      "owner()": {
        "notice": "Current owner of this contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "token()": {
        "notice": "YAK token"
      },
      "tokenGrants(address)": {
        "notice": "Mapping of recipient address > current token grant balance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13,
        "contract": "contracts/Claim.sol:Claim",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)6444"
      },
      {
        "astId": 16,
        "contract": "contracts/Claim.sol:Claim",
        "label": "deadline",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 21,
        "contract": "contracts/Claim.sol:Claim",
        "label": "tokenGrants",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 24,
        "contract": "contracts/Claim.sol:Claim",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)6444": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}