{
  "address": "0x0cf605484A512d3F3435fed77AB5ddC0525Daf5f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsPerSecond",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "addressType",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "ChangedAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "ChangedOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldEndTimestamp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newEndTimestamp",
          "type": "uint256"
        }
      ],
      "name": "ChangedRewardsEndTimestamp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldRewardsPerSecond",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newRewardsPerSecond",
          "type": "uint256"
        }
      ],
      "name": "ChangedRewardsPerSecond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoints",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAllocPoints",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardStartTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "vpForDeposit",
          "type": "bool"
        }
      ],
      "name": "PoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAllocPoints",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAllocPoints",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalAllocPoints",
          "type": "uint256"
        }
      ],
      "name": "PoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "SetRewardsStartTimestamp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "withUpdate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "vpForDeposit",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addRewardsBalance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockManager",
      "outputs": [
        {
          "internalType": "contract ILockManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRewardsPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "vpForDeposit",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "setLockManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRewardsPerSecond",
          "type": "uint256"
        }
      ],
      "name": "setRewardsPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardTokenDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x39f5ed0ad22b305169f67b69d30da368e7112e2b27546e44a6caf96ff282ecff",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x0cf605484A512d3F3435fed77AB5ddC0525Daf5f",
    "transactionIndex": 0,
    "gasUsed": "2031503",
    "logsBloom": "0x
    "blockHash": "0x0b72440bab8f1bc0702e745023295e007034d4adc3d62c2c292fb834a94dd215",
    "transactionHash": "0x39f5ed0ad22b305169f67b69d30da368e7112e2b27546e44a6caf96ff282ecff",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2926011,
        "transactionHash": "0x39f5ed0ad22b305169f67b69d30da368e7112e2b27546e44a6caf96ff282ecff",
        "address": "0x0cf605484A512d3F3435fed77AB5ddC0525Daf5f",
        "topics": [
          "0x2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0b72440bab8f1bc0702e745023295e007034d4adc3d62c2c292fb834a94dd215"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2926011,
        "transactionHash": "0x39f5ed0ad22b305169f67b69d30da368e7112e2b27546e44a6caf96ff282ecff",
        "address": "0x0cf605484A512d3F3435fed77AB5ddC0525Daf5f",
        "topics": [
          "0x629c91fc9de3db5e699d8bad8523995c8e14e7f52fb91b49725e6625f2ea45f4",
          "0xb89cdd26cddd51301940bf2715f765b626b8a5a9e2681ac62dc83cc2db2530c0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cb031c1044f27bb491e61bcbd96a54f5316e23ef"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x0b72440bab8f1bc0702e745023295e007034d4adc3d62c2c292fb834a94dd215"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2926011,
        "transactionHash": "0x39f5ed0ad22b305169f67b69d30da368e7112e2b27546e44a6caf96ff282ecff",
        "address": "0x0cf605484A512d3F3435fed77AB5ddC0525Daf5f",
        "topics": [
          "0x457596c4aedbe8a498e6b9a94fa90cbba7bd432ddba1f7e75e85bcf5e3639171",
          "0x0000000000000000000000000000000000000000000000000000000061124774"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x0b72440bab8f1bc0702e745023295e007034d4adc3d62c2c292fb834a94dd215"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2926011,
        "transactionHash": "0x39f5ed0ad22b305169f67b69d30da368e7112e2b27546e44a6caf96ff282ecff",
        "address": "0x0cf605484A512d3F3435fed77AB5ddC0525Daf5f",
        "topics": [
          "0x6c5ac63fafcfaaa35808336a9aef07619736abe0349beeb783a3a8ab67936c81",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000000000000000000000000000000038d7ea4c68000"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x0b72440bab8f1bc0702e745023295e007034d4adc3d62c2c292fb834a94dd215"
      }
    ],
    "blockNumber": 2926011,
    "cumulativeGasUsed": "2031503",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "0xCB031c1044f27bb491E61bCBd96a54f5316e23EF",
    "0",
    "1000000000000000"
  ],
  "solcInputHash": "cbca27c4fdf8e9078ea5771556254fe0",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsPerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"addressType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChangedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldEndTimestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"ChangedRewardsEndTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldRewardsPerSecond\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newRewardsPerSecond\",\"type\":\"uint256\"}],\"name\":\"ChangedRewardsPerSecond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAllocPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardStartTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vpForDeposit\",\"type\":\"bool\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAllocPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAllocPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalAllocPoints\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"}],\"name\":\"SetRewardsStartTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"withUpdate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vpForDeposit\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addRewardsBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockManager\",\"outputs\":[{\"internalType\":\"contract ILockManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"vpForDeposit\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setLockManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardsPerSecond\",\"type\":\"uint256\"}],\"name\":\"setRewardsPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Controls rewards distribution for network\",\"kind\":\"dev\",\"methods\":{\"add(uint256,address,bool,bool)\":{\"details\":\"Can only be called by the owner. DO NOT add the same token more than once. Rewards will be messed up if you do.\",\"params\":{\"allocPoint\":\"Number of allocation points to allot to this token/pool\",\"token\":\"The token that will be staked for rewards\",\"vpForDeposit\":\"If true, users get voting power for deposits\",\"withUpdate\":\"if specified, update all pools before adding new pool\"}},\"addRewardsBalance()\":{\"details\":\"Can only be called by the owner\"},\"changeOwner(address)\":{\"details\":\"Can only be called by the owner\",\"params\":{\"newOwner\":\"New owner address\"}},\"constructor\":{\"params\":{\"_lockManager\":\"address of LockManager contract\",\"_owner\":\"owner of contract\",\"_rewardsPerSecond\":\"initial amount of reward tokens to be distributed per second\",\"_startTimestamp\":\"timestamp when rewards will start\"}},\"deposit(uint256,uint256)\":{\"params\":{\"amount\":\"number of tokens to deposit\",\"pid\":\"pool id\"}},\"depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"It is up to the frontend developer to ensure the pool token implements permit - otherwise this will fail\",\"params\":{\"amount\":\"number of tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"pid\":\"pool id\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"emergencyWithdraw(uint256)\":{\"params\":{\"pid\":\"pool id\"}},\"getMultiplier(uint256,uint256)\":{\"params\":{\"from\":\"From timestamp\",\"to\":\"To timestamp\"},\"returns\":{\"_0\":\"multiplier\"}},\"massUpdatePools()\":{\"details\":\"Be careful of gas spending!\"},\"pendingRewards(uint256,address)\":{\"params\":{\"account\":\"user account to check\",\"pid\":\"pool id\"},\"returns\":{\"_0\":\"pending rewards\"}},\"poolLength()\":{\"returns\":{\"_0\":\"pool length\"}},\"set(uint256,uint256,bool)\":{\"details\":\"Can only be called by the owner\",\"params\":{\"allocPoint\":\"New number of allocation points for pool\",\"pid\":\"The RewardManager pool id\",\"withUpdate\":\"if specified, update all pools before setting allocation points\"}},\"setLockManager(address)\":{\"params\":{\"newAddress\":\"address of new LockManager\"}},\"setRewardsPerSecond(uint256)\":{\"details\":\"Can only be called by the owner\",\"params\":{\"newRewardsPerSecond\":\"new amount of rewards to reward each second\"}},\"updatePool(uint256)\":{\"params\":{\"pid\":\"pool id\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"amount\":\"number of tokens to withdraw\",\"pid\":\"pool id\"}}},\"title\":\"MasterYak\",\"version\":1},\"userdoc\":{\"events\":{\"ChangedAddress(string,address,address)\":{\"notice\":\"Event emitted when contract address is changed\"},\"ChangedOwner(address,address)\":{\"notice\":\"Event emitted when the owner of the rewards manager contract is updated\"},\"ChangedRewardsEndTimestamp(uint256,uint256)\":{\"notice\":\"Event emitted when the rewards end timestamp is updated\"},\"ChangedRewardsPerSecond(uint256,uint256)\":{\"notice\":\"Event emitted when the amount of reward tokens per seconds is updated\"},\"Deposit(address,uint256,uint256)\":{\"notice\":\"Event emitted when a user deposits funds in the rewards manager\"},\"EmergencyWithdraw(address,uint256,uint256)\":{\"notice\":\"Event emitted when a user withdraws their original funds from the rewards manager without claiming rewards\"},\"PoolAdded(uint256,address,uint256,uint256,uint256,bool)\":{\"notice\":\"Event emitted when new pool is added to the rewards manager\"},\"PoolUpdated(uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when pool allocation points are updated\"},\"SetRewardsStartTimestamp(uint256)\":{\"notice\":\"Event emitted when the rewards start timestamp is set\"},\"Withdraw(address,uint256,uint256)\":{\"notice\":\"Event emitted when a user withdraws their original funds + rewards from the rewards manager\"}},\"kind\":\"user\",\"methods\":{\"add(uint256,address,bool,bool)\":{\"notice\":\"Add a new reward token to the pool\"},\"addRewardsBalance()\":{\"notice\":\"Add rewards to contract\"},\"changeOwner(address)\":{\"notice\":\"Change owner of vesting contract\"},\"constructor\":{\"notice\":\"Create a new Rewards Manager contract\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposit tokens to MasterYak for rewards allocation.\"},\"depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit tokens to MasterYak for rewards allocation, using permit for approval\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Withdraw without caring about rewards. EMERGENCY ONLY.\"},\"endTimestamp()\":{\"notice\":\"The timestamp when rewards end.\"},\"getMultiplier(uint256,uint256)\":{\"notice\":\"Return reward multiplier over the given from to to timestamp.\"},\"lockManager()\":{\"notice\":\"LockManager contract\"},\"massUpdatePools()\":{\"notice\":\"Update reward variables for all pools\"},\"owner()\":{\"notice\":\"Current owner of this contract\"},\"pendingRewards(uint256,address)\":{\"notice\":\"View function to see pending rewards on frontend.\"},\"poolInfo(uint256)\":{\"notice\":\"Info of each pool.\"},\"poolLength()\":{\"notice\":\"View function to see current poolInfo array length\"},\"rewardsActive()\":{\"notice\":\"Returns true if rewards are actively being accumulated\"},\"rewardsPerSecond()\":{\"notice\":\"Rewards rewarded per second\"},\"set(uint256,uint256,bool)\":{\"notice\":\"Update the given pool's allocation points\"},\"setLockManager(address)\":{\"notice\":\"Set new LockManager address\"},\"setRewardsPerSecond(uint256)\":{\"notice\":\"Set new rewards per second\"},\"startTimestamp()\":{\"notice\":\"The timestamp when rewards start.\"},\"totalAllocPoint()\":{\"notice\":\"Total allocation points. Must be the sum of all allocation points in all pools.\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables of the given pool to be up-to-date\"},\"userInfo(uint256,address)\":{\"notice\":\"Info of each user that stakes tokens\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw tokens from MasterYak, claiming rewards.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterYak.sol\":\"MasterYak\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"contracts/MasterYak.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ILockManager.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title MasterYak\\n * @dev Controls rewards distribution for network\\n */\\ncontract MasterYak is ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Current owner of this contract\\n    address public owner;\\n\\n    /// @notice Info of each user.\\n    struct UserInfo {\\n        uint256 amount;          // How many tokens the user has provided.\\n        uint256 rewardTokenDebt; // Reward debt for reward token. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of reward tokens\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accRewardsPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws tokens to a pool. Here's what happens:\\n        //   1. The pool's `accRewardsPerShare` (and `lastRewardTimestamp`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    /// @notice Info of each pool.\\n    struct PoolInfo {\\n        IERC20 token;                // Address of token contract.\\n        uint256 allocPoint;          // How many allocation points assigned to this pool. Reward tokens to distribute per second.\\n        uint256 lastRewardTimestamp; // Last timestamp where reward tokens were distributed.\\n        uint256 accRewardsPerShare;  // Accumulated reward tokens per share, times 1e12. See below.\\n        uint256 totalStaked;         // Total amount of token staked via Rewards Manager\\n        bool vpForDeposit;           // Do users get voting power for deposits of this token?\\n    }\\n\\n    /// @notice LockManager contract\\n    ILockManager public lockManager;\\n\\n    /// @notice Rewards rewarded per second\\n    uint256 public rewardsPerSecond;\\n\\n    /// @notice Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    \\n    /// @notice Info of each user that stakes tokens\\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\\n    \\n    /// @notice Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n\\n    /// @notice The timestamp when rewards start.\\n    uint256 public startTimestamp;\\n\\n    /// @notice The timestamp when rewards end.\\n    uint256 public endTimestamp;\\n\\n    /// @notice only owner can call function\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"not owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Event emitted when a user deposits funds in the rewards manager\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    /// @notice Event emitted when a user withdraws their original funds + rewards from the rewards manager\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    /// @notice Event emitted when a user withdraws their original funds from the rewards manager without claiming rewards\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    /// @notice Event emitted when new pool is added to the rewards manager\\n    event PoolAdded(uint256 indexed pid, address indexed token, uint256 allocPoints, uint256 totalAllocPoints, uint256 rewardStartTimestamp, bool vpForDeposit);\\n    \\n    /// @notice Event emitted when pool allocation points are updated\\n    event PoolUpdated(uint256 indexed pid, uint256 oldAllocPoints, uint256 newAllocPoints, uint256 newTotalAllocPoints);\\n\\n    /// @notice Event emitted when the owner of the rewards manager contract is updated\\n    event ChangedOwner(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Event emitted when the amount of reward tokens per seconds is updated\\n    event ChangedRewardsPerSecond(uint256 indexed oldRewardsPerSecond, uint256 indexed newRewardsPerSecond);\\n\\n    /// @notice Event emitted when the rewards start timestamp is set\\n    event SetRewardsStartTimestamp(uint256 indexed startTimestamp);\\n\\n    /// @notice Event emitted when the rewards end timestamp is updated\\n    event ChangedRewardsEndTimestamp(uint256 indexed oldEndTimestamp, uint256 indexed newEndTimestamp);\\n\\n    /// @notice Event emitted when contract address is changed\\n    event ChangedAddress(string indexed addressType, address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @notice Create a new Rewards Manager contract\\n     * @param _owner owner of contract\\n     * @param _lockManager address of LockManager contract\\n     * @param _startTimestamp timestamp when rewards will start\\n     * @param _rewardsPerSecond initial amount of reward tokens to be distributed per second\\n     */\\n    constructor(\\n        address _owner, \\n        address _lockManager,\\n        uint256 _startTimestamp,\\n        uint256 _rewardsPerSecond\\n    ) {\\n        owner = _owner;\\n        emit ChangedOwner(address(0), _owner);\\n\\n        lockManager = ILockManager(_lockManager);\\n        emit ChangedAddress(\\\"LOCK_MANAGER\\\", address(0), _lockManager);\\n\\n        startTimestamp = _startTimestamp == 0 ? block.timestamp : _startTimestamp;\\n        emit SetRewardsStartTimestamp(startTimestamp);\\n\\n        rewardsPerSecond = _rewardsPerSecond;\\n        emit ChangedRewardsPerSecond(0, _rewardsPerSecond);\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @notice View function to see current poolInfo array length\\n     * @return pool length\\n     */\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    /**\\n     * @notice Add a new reward token to the pool\\n     * @dev Can only be called by the owner. DO NOT add the same token more than once. Rewards will be messed up if you do.\\n     * @param allocPoint Number of allocation points to allot to this token/pool\\n     * @param token The token that will be staked for rewards\\n     * @param withUpdate if specified, update all pools before adding new pool\\n     * @param vpForDeposit If true, users get voting power for deposits\\n     */\\n    function add(\\n        uint256 allocPoint, \\n        address token,\\n        bool withUpdate,\\n        bool vpForDeposit\\n    ) external onlyOwner {\\n        if (withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 rewardStartTimestamp = block.timestamp > startTimestamp ? block.timestamp : startTimestamp;\\n        if (totalAllocPoint == 0) {\\n            _setRewardsEndTimestamp();\\n        }\\n        totalAllocPoint = totalAllocPoint.add(allocPoint);\\n        poolInfo.push(PoolInfo({\\n            token: IERC20(token),\\n            allocPoint: allocPoint,\\n            lastRewardTimestamp: rewardStartTimestamp,\\n            accRewardsPerShare: 0,\\n            totalStaked: 0,\\n            vpForDeposit: vpForDeposit\\n        }));\\n        emit PoolAdded(poolInfo.length - 1, token, allocPoint, totalAllocPoint, rewardStartTimestamp, vpForDeposit);\\n    }\\n\\n    /**\\n     * @notice Update the given pool's allocation points\\n     * @dev Can only be called by the owner\\n     * @param pid The RewardManager pool id\\n     * @param allocPoint New number of allocation points for pool\\n     * @param withUpdate if specified, update all pools before setting allocation points\\n     */\\n    function set(\\n        uint256 pid, \\n        uint256 allocPoint, \\n        bool withUpdate\\n    ) external onlyOwner {\\n        if (withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[pid].allocPoint).add(allocPoint);\\n        emit PoolUpdated(pid, poolInfo[pid].allocPoint, allocPoint, totalAllocPoint);\\n        poolInfo[pid].allocPoint = allocPoint;\\n    }\\n\\n    /**\\n     * @notice Returns true if rewards are actively being accumulated\\n     */\\n    function rewardsActive() public view returns (bool) {\\n        return block.timestamp >= startTimestamp && block.timestamp <= endTimestamp && totalAllocPoint > 0 ? true : false;\\n    }\\n\\n    /**\\n     * @notice Return reward multiplier over the given from to to timestamp.\\n     * @param from From timestamp\\n     * @param to To timestamp\\n     * @return multiplier\\n     */\\n    function getMultiplier(uint256 from, uint256 to) public view returns (uint256) {\\n        uint256 toTimestamp = to > endTimestamp ? endTimestamp : to;\\n        return toTimestamp > from ? toTimestamp.sub(from) : 0;\\n    }\\n\\n    /**\\n     * @notice View function to see pending rewards on frontend.\\n     * @param pid pool id\\n     * @param account user account to check\\n     * @return pending rewards\\n     */\\n    function pendingRewards(uint256 pid, address account) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][account];\\n        uint256 accRewardsPerShare = pool.accRewardsPerShare;\\n        uint256 tokenSupply = pool.totalStaked;\\n        if (block.timestamp > pool.lastRewardTimestamp && tokenSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardTimestamp, block.timestamp);\\n            uint256 totalReward = multiplier.mul(rewardsPerSecond).mul(pool.allocPoint).div(totalAllocPoint);\\n            accRewardsPerShare = accRewardsPerShare.add(totalReward.mul(1e12).div(tokenSupply));\\n        }\\n\\n        uint256 accumulatedRewards = user.amount.mul(accRewardsPerShare).div(1e12);\\n        \\n        if (accumulatedRewards < user.rewardTokenDebt) {\\n            return 0;\\n        }\\n\\n        return accumulatedRewards.sub(user.rewardTokenDebt);\\n    }\\n\\n    /**\\n     * @notice Update reward variables for all pools\\n     * @dev Be careful of gas spending!\\n     */\\n    function massUpdatePools() public {\\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update reward variables of the given pool to be up-to-date\\n     * @param pid pool id\\n     */\\n    function updatePool(uint256 pid) public {\\n        PoolInfo storage pool = poolInfo[pid];\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        uint256 tokenSupply = pool.totalStaked;\\n        if (tokenSupply == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardTimestamp, block.timestamp);\\n        uint256 totalReward = multiplier.mul(rewardsPerSecond).mul(pool.allocPoint).div(totalAllocPoint);\\n        pool.accRewardsPerShare = pool.accRewardsPerShare.add(totalReward.mul(1e12).div(tokenSupply));\\n        pool.lastRewardTimestamp = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to MasterYak for rewards allocation.\\n     * @param pid pool id\\n     * @param amount number of tokens to deposit\\n     */\\n    function deposit(uint256 pid, uint256 amount) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        _deposit(pid, amount, pool, user);\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to MasterYak for rewards allocation, using permit for approval\\n     * @dev It is up to the frontend developer to ensure the pool token implements permit - otherwise this will fail\\n     * @param pid pool id\\n     * @param amount number of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 pid, \\n        uint256 amount,\\n        uint256 deadline, \\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        pool.token.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(pid, amount, pool, user);\\n    }\\n\\n    /**\\n     * @notice Withdraw tokens from MasterYak, claiming rewards.\\n     * @param pid pool id\\n     * @param amount number of tokens to withdraw\\n     */\\n    function withdraw(uint256 pid, uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"MasterYak::withdraw: amount must be > 0\\\");\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        _withdraw(pid, amount, pool, user);\\n    }\\n\\n    /**\\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n     * @param pid pool id\\n     */\\n    function emergencyWithdraw(uint256 pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[pid];\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n\\n        if (user.amount > 0) {\\n\\n            if (pool.vpForDeposit) {\\n                lockManager.removeVotingPower(msg.sender, address(pool.token), user.amount);\\n            }\\n\\n            pool.totalStaked = pool.totalStaked.sub(user.amount);\\n            pool.token.safeTransfer(msg.sender, user.amount);\\n\\n            emit EmergencyWithdraw(msg.sender, pid, user.amount);\\n\\n            user.amount = 0;\\n            user.rewardTokenDebt = 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Set new rewards per second\\n     * @dev Can only be called by the owner\\n     * @param newRewardsPerSecond new amount of rewards to reward each second\\n     */\\n    function setRewardsPerSecond(uint256 newRewardsPerSecond) external onlyOwner {\\n        emit ChangedRewardsPerSecond(rewardsPerSecond, newRewardsPerSecond);\\n        rewardsPerSecond = newRewardsPerSecond;\\n        _setRewardsEndTimestamp();\\n    }\\n        \\n    /**\\n     * @notice Set new LockManager address\\n     * @param newAddress address of new LockManager\\n     */\\n    function setLockManager(address newAddress) external onlyOwner {\\n        emit ChangedAddress(\\\"LOCK_MANAGER\\\", address(lockManager), newAddress);\\n        lockManager = ILockManager(newAddress);\\n    }\\n\\n    /**\\n     * @notice Add rewards to contract\\n     * @dev Can only be called by the owner\\n     */\\n    function addRewardsBalance() external payable onlyOwner {\\n        _setRewardsEndTimestamp();\\n    }\\n\\n    /**\\n     * @notice Change owner of vesting contract\\n     * @dev Can only be called by the owner\\n     * @param newOwner New owner address\\n     */\\n    function changeOwner(address newOwner) external onlyOwner {\\n        require(newOwner != address(0) && newOwner != address(this), \\\"MasterYak::changeOwner: not valid address\\\");\\n        emit ChangedOwner(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Internal implementation of deposit\\n     * @param pid pool id\\n     * @param amount number of tokens to deposit\\n     * @param pool the pool info\\n     * @param user the user info \\n     */\\n    function _deposit(\\n        uint256 pid, \\n        uint256 amount, \\n        PoolInfo storage pool, \\n        UserInfo storage user\\n    ) internal {\\n        updatePool(pid);\\n\\n        if (user.amount > 0) {\\n            uint256 pendingRewardAmount = user.amount.mul(pool.accRewardsPerShare).div(1e12).sub(user.rewardTokenDebt);\\n\\n            if (pendingRewardAmount > 0) {\\n                _safeRewardsTransfer(msg.sender, pendingRewardAmount);\\n            }\\n        }\\n       \\n        pool.token.safeTransferFrom(msg.sender, address(this), amount);\\n        pool.totalStaked = pool.totalStaked.add(amount);\\n        user.amount = user.amount.add(amount);\\n        user.rewardTokenDebt = user.amount.mul(pool.accRewardsPerShare).div(1e12);\\n\\n        if (amount > 0 && pool.vpForDeposit) {\\n            lockManager.grantVotingPower(msg.sender, address(pool.token), amount);\\n        }\\n\\n        emit Deposit(msg.sender, pid, amount);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of withdraw\\n     * @param pid pool id\\n     * @param amount number of tokens to withdraw\\n     * @param pool the pool info\\n     * @param user the user info \\n     */\\n    function _withdraw(\\n        uint256 pid, \\n        uint256 amount,\\n        PoolInfo storage pool, \\n        UserInfo storage user\\n    ) internal {\\n        require(user.amount >= amount, \\\"MasterYak::_withdraw: amount > user balance\\\");\\n\\n        updatePool(pid);\\n\\n        uint256 pendingRewardAmount = user.amount.mul(pool.accRewardsPerShare).div(1e12).sub(user.rewardTokenDebt);\\n        user.amount = user.amount.sub(amount);\\n        user.rewardTokenDebt = user.amount.mul(pool.accRewardsPerShare).div(1e12);\\n\\n        if (pendingRewardAmount > 0) {\\n            _safeRewardsTransfer(msg.sender, pendingRewardAmount);\\n        }\\n        \\n        if (pool.vpForDeposit) {\\n            lockManager.removeVotingPower(msg.sender, address(pool.token), amount);\\n        }\\n\\n        pool.totalStaked = pool.totalStaked.sub(amount);\\n        pool.token.safeTransfer(msg.sender, amount);\\n\\n        emit Withdraw(msg.sender, pid, amount);\\n    }\\n\\n    /**\\n     * @notice Safe reward transfer function, just in case if rounding error causes pool to not have enough reward token.\\n     * @param to account that is receiving rewards\\n     * @param amount amount of rewards to send\\n     */\\n    function _safeRewardsTransfer(address payable to, uint256 amount) internal {\\n        uint256 rewardTokenBalance = address(this).balance;\\n        if (amount > rewardTokenBalance) {\\n            to.transfer(rewardTokenBalance);\\n        } else {\\n            to.transfer(amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function that updates rewards end timestamp based on rewards per second and the balance of the contract\\n     */\\n    function _setRewardsEndTimestamp() internal {\\n        if(rewardsPerSecond > 0) {\\n            uint256 rewardFromTimestamp = block.timestamp >= startTimestamp ? block.timestamp : startTimestamp;\\n            uint256 newEndTimestamp = rewardFromTimestamp.add(address(this).balance.div(rewardsPerSecond));\\n            if(newEndTimestamp > rewardFromTimestamp && newEndTimestamp != endTimestamp) {\\n                emit ChangedRewardsEndTimestamp(endTimestamp, newEndTimestamp);\\n                endTimestamp = newEndTimestamp;\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xfdf20c7986ca3a643354eb8d28410fd50e0b2929f810f742528515490710f54e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/ILockManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILockManager {\\n    struct LockedStake {\\n        uint256 amount;\\n        uint256 votingPower;\\n    }\\n\\n    function getAmountStaked(address staker, address stakedToken) external view returns (uint256);\\n    function getStake(address staker, address stakedToken) external view returns (LockedStake memory);\\n    function calculateVotingPower(address token, uint256 amount) external view returns (uint256);\\n    function grantVotingPower(address receiver, address token, uint256 tokenAmount) external returns (uint256 votingPowerGranted);\\n    function removeVotingPower(address receiver, address token, uint256 tokenAmount) external returns (uint256 votingPowerRemoved);\\n}\",\"keccak256\":\"0x0b5197107da22c809febb82a6178b0dc8f1392dc7e679b4d55a3a177ccd93515\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x3200dad4899dfc4a7b22d84e4b3768f23f50fd161c5b5997d6ae7004d90b0a94\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0x3318ee67bfc251e74ac8ac1a97061fdaed4f5355fd9c23eb26e1ee1550f675bd\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xf5c6f7a4e202733b9bea8dc0c4be4bc16f765c08079418eb426ad490d9f4142e\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200237d3803806200237d833981016040819052620000349162000175565b6001600081815581546001600160a01b0319166001600160a01b0387169081179092556040517f2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e908290a3600280546001600160a01b0319166001600160a01b038516908117909155604051600090620000ae90620001bc565b604051908190038120907f629c91fc9de3db5e699d8bad8523995c8e14e7f52fb91b49725e6625f2ea45f490600090a48115620000ec5781620000ee565b425b60078190556040517f457596c4aedbe8a498e6b9a94fa90cbba7bd432ddba1f7e75e85bcf5e363917190600090a2600381905560405181906000907f6c5ac63fafcfaaa35808336a9aef07619736abe0349beeb783a3a8ab67936c81908290a350505050620001d4565b80516001600160a01b03811681146200017057600080fd5b919050565b600080600080608085870312156200018b578384fd5b620001968562000158565b9350620001a66020860162000158565b6040860151606090960151949790965092505050565b6b2627a1a5afa6a0a720a3a2a960a11b8152600c0190565b61219980620001e46000396000f3fe60806040526004361061018f5760003560e01c8063a519121a116100d6578063d18df53c1161007f578063e6fd48bc11610059578063e6fd48bc14610440578063eacdaabc14610455578063f592c5d41461046a57610196565b8063d18df53c146103e0578063deedfdbd14610400578063e2bbb1581461042057610196565b8063acca30a2116100b0578063acca30a21461038b578063c507aeaa146103a0578063cbeb09aa146103c057610196565b8063a519121a14610334578063a6f9dae114610356578063a85adeab1461037657610196565b80635312ea8e116101385780638da5cb5b116101125780638da5cb5b146102c45780638dbb1e3a146102e657806393f1a40b1461030657610196565b80635312ea8e1461026f578063630b5ba11461028f57806364482f79146102a457610196565b8063441a3e7011610169578063441a3e701461020d578063515bc3231461022f57806351eb05a61461024f57610196565b8063081e3eda1461019b5780631526fe27146101c657806317caf6f1146101f857610196565b3661019657005b600080fd5b3480156101a757600080fd5b506101b0610472565b6040516101bd91906120df565b60405180910390f35b3480156101d257600080fd5b506101e66101e1366004611ad1565b610478565b6040516101bd96959493929190611d42565b34801561020457600080fd5b506101b06104d5565b34801561021957600080fd5b5061022d610228366004611b7c565b6104db565b005b34801561023b57600080fd5b5061022d61024a366004611bd5565b610577565b34801561025b57600080fd5b5061022d61026a366004611ad1565b610683565b34801561027b57600080fd5b5061022d61028a366004611ad1565b610746565b34801561029b57600080fd5b5061022d6108fb565b3480156102b057600080fd5b5061022d6102bf366004611b9d565b610919565b3480156102d057600080fd5b506102d9610a25565b6040516101bd9190611c71565b3480156102f257600080fd5b506101b0610301366004611b7c565b610a41565b34801561031257600080fd5b50610326610321366004611b01565b610a7b565b6040516101bd9291906120e8565b34801561034057600080fd5b50610349610a9f565b6040516101bd9190611d37565b34801561036257600080fd5b5061022d610371366004611a9b565b610ad6565b34801561038257600080fd5b506101b0610bf2565b34801561039757600080fd5b506102d9610bf8565b3480156103ac57600080fd5b5061022d6103bb366004611b2c565b610c14565b3480156103cc57600080fd5b5061022d6103db366004611ad1565b610e9b565b3480156103ec57600080fd5b506101b06103fb366004611b01565b610f0e565b34801561040c57600080fd5b5061022d61041b366004611a9b565b61102e565b34801561042c57600080fd5b5061022d61043b366004611b7c565b611106565b34801561044c57600080fd5b506101b0611172565b34801561046157600080fd5b506101b0611178565b61022d61117e565b60045490565b6004818154811061048557fe5b600091825260209091206006909102018054600182015460028301546003840154600485015460059095015473ffffffffffffffffffffffffffffffffffffffff90941695509193909260ff1686565b60065481565b600260005414156105075760405162461bcd60e51b81526004016104fe90612014565b60405180910390fd5b6002600055806105295760405162461bcd60e51b81526004016104fe90611fb7565b60006004838154811061053857fe5b6000918252602080832086845260058252604080852033865290925292206006909102909101915061056c848484846111bf565b505060016000555050565b6002600054141561059a5760405162461bcd60e51b81526004016104fe90612014565b6002600090815560048054889081106105af57fe5b600091825260208083208a845260058252604080852033808752935293849020600690930201805493517fd505accf000000000000000000000000000000000000000000000000000000008152909450919273ffffffffffffffffffffffffffffffffffffffff169163d505accf916106369130908c908c908c908c908c90600401611c92565b600060405180830381600087803b15801561065057600080fd5b505af1158015610664573d6000803e3d6000fd5b505050506106748888848461139b565b50506001600055505050505050565b60006004828154811061069257fe5b90600052602060002090600602019050806002015442116106b35750610743565b6004810154806106ca575042600290910155610743565b60006106da836002015442610a41565b9050600061070d60065461070786600101546107016003548761157290919063ffffffff16565b90611572565b906115b3565b9050610730610725846107078464e8d4a51000611572565b6003860154906115f5565b6003850155505042600290920191909155505b50565b600260005414156107695760405162461bcd60e51b81526004016104fe90612014565b60026000908155600480548390811061077e57fe5b600091825260208083208584526005825260408085203386529092529220805460069092029092019250156108f157600582015460ff161561086d57600254825482546040517fbc3e1b7a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384169363bc3e1b7a936108199333939290911691600401611ce0565b602060405180830381600087803b15801561083357600080fd5b505af1158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b9190611ae9565b505b8054600483015461087d9161161a565b6004830155805482546108aa9173ffffffffffffffffffffffffffffffffffffffff90911690339061165c565b8054604051849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae0595916108de916120df565b60405180910390a3600080825560018201555b5050600160005550565b60005b6004548110156107435761091181610683565b6001016108fe565b60015473ffffffffffffffffffffffffffffffffffffffff1633146109505760405162461bcd60e51b81526004016104fe906120a8565b801561095e5761095e6108fb565b61099b826109956004868154811061097257fe5b90600052602060002090600602016001015460065461161a90919063ffffffff16565b906115f5565b600681905550827fb0a2ded49817748754bcca0474b24011f01d4574dd5c40e14197ffa2e6540fef600485815481106109d057fe5b906000526020600020906006020160010154846006546040516109f5939291906120f6565b60405180910390a28160048481548110610a0b57fe5b906000526020600020906006020160010181905550505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6000806008548311610a535782610a57565b6008545b9050838111610a67576000610a71565b610a71818561161a565b9150505b92915050565b60056020908152600092835260408084209091529082529020805460019091015482565b60006007544210158015610ab557506008544211155b8015610ac357506000600654115b610ace576000610ad1565b60015b905090565b60015473ffffffffffffffffffffffffffffffffffffffff163314610b0d5760405162461bcd60e51b81526004016104fe906120a8565b73ffffffffffffffffffffffffffffffffffffffff811615801590610b48575073ffffffffffffffffffffffffffffffffffffffff81163014155b610b645760405162461bcd60e51b81526004016104fe9061204b565b60015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e90600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60085481565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff163314610c4b5760405162461bcd60e51b81526004016104fe906120a8565b8115610c5957610c596108fb565b60006007544211610c6c57600754610c6e565b425b905060065460001415610c8357610c83611702565b600654610c9090866115f5565b60069081556040805160c08101825273ffffffffffffffffffffffffffffffffffffffff878116808352602083018a8152838501878152600060608601818152608087018281528b151560a08901908152600480546001810182559481905298517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b948c0294850180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919099161790975593517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c83015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d82015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e82015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f82015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a090920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169215159290921790915590549254915190927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01917ff50ac550196e2285186793081082f8c6e157ff102761144feb3416d01d7c5d6591610e8c918a918790899061210c565b60405180910390a35050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610ed25760405162461bcd60e51b81526004016104fe906120a8565b6003546040518291907f6c5ac63fafcfaaa35808336a9aef07619736abe0349beeb783a3a8ab67936c8190600090a36003819055610743611702565b60008060048481548110610f1e57fe5b6000918252602080832087845260058252604080852073ffffffffffffffffffffffffffffffffffffffff891686529092529220600360069092029092019081015460048201546002830154929450909142118015610f7c57508015155b15610fdc576000610f91856002015442610a41565b90506000610fb860065461070788600101546107016003548761157290919063ffffffff16565b9050610fd7610fd0846107078464e8d4a51000611572565b85906115f5565b935050505b8254600090610ff69064e8d4a51000906107079086611572565b9050836001015481101561101257600095505050505050610a75565b600184015461102290829061161a565b98975050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110655760405162461bcd60e51b81526004016104fe906120a8565b60025460405173ffffffffffffffffffffffffffffffffffffffff80841692169061108f90611c48565b604051908190038120907f629c91fc9de3db5e699d8bad8523995c8e14e7f52fb91b49725e6625f2ea45f490600090a4600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600260005414156111295760405162461bcd60e51b81526004016104fe90612014565b60026000908155600480548490811061113e57fe5b6000918252602080832086845260058252604080852033865290925292206006909102909101915061056c8484848461139b565b60075481565b60035481565b60015473ffffffffffffffffffffffffffffffffffffffff1633146111b55760405162461bcd60e51b81526004016104fe906120a8565b6111bd611702565b565b80548311156111e05760405162461bcd60e51b81526004016104fe90611ec6565b6111e984610683565b600061121d826001015461121764e8d4a510006107078760030154876000015461157290919063ffffffff16565b9061161a565b825490915061122c908561161a565b80835560038401546112499164e8d4a51000916107079190611572565b6001830155801561125e5761125e3382611794565b600583015460ff161561131d5760025483546040517fbc3e1b7a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283169263bc3e1b7a926112c9923392909116908990600401611ce0565b602060405180830381600087803b1580156112e357600080fd5b505af11580156112f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131b9190611ae9565b505b600483015461132c908561161a565b600484015582546113549073ffffffffffffffffffffffffffffffffffffffff16338661165c565b843373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56886604051610e8c91906120df565b6113a484610683565b8054156113ed5760006113d9826001015461121764e8d4a510006107078760030154876000015461157290919063ffffffff16565b905080156113eb576113eb3382611794565b505b81546114119073ffffffffffffffffffffffffffffffffffffffff1633308661182f565b600482015461142090846115f5565b6004830155805461143190846115f5565b808255600383015461144e9164e8d4a51000916107079190611572565b600182015582158015906114665750600582015460ff165b1561151d5760025482546040517fbc61256e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283169263bc61256e926114c9923392909116908890600401611ce0565b602060405180830381600087803b1580156114e357600080fd5b505af11580156114f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151b9190611ae9565b505b833373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158560405161156491906120df565b60405180910390a350505050565b60008261158157506000610a75565b8282028284828161158e57fe5b04146115ac5760405162461bcd60e51b81526004016104fe90611e69565b9392505050565b60006115ac83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611850565b6000828201838110156115ac5760405162461bcd60e51b81526004016104fe90611dd5565b60006115ac83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250611887565b6116fd8363a9059cbb60e01b848460405160240161167b929190611d11565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526118b3565b505050565b600354156111bd57600060075442101561171e57600754611720565b425b9050600061174361173c600354476115b390919063ffffffff16565b83906115f5565b9050818111801561175657506008548114155b15611790576008546040518291907fc27995de4b73bfe8fa8c957b4ae89e3113185c3d9e2c6e3bf680ce10708218e590600090a360088190555b5050565b47808211156117e65760405173ffffffffffffffffffffffffffffffffffffffff84169082156108fc029083906000818181858888f193505050501580156117e0573d6000803e3d6000fd5b506116fd565b60405173ffffffffffffffffffffffffffffffffffffffff84169083156108fc029084906000818181858888f19350505050158015611829573d6000803e3d6000fd5b50505050565b611829846323b872dd60e01b85858560405160240161167b93929190611ce0565b600081836118715760405162461bcd60e51b81526004016104fe9190611d84565b50600083858161187d57fe5b0495945050505050565b600081848411156118ab5760405162461bcd60e51b81526004016104fe9190611d84565b505050900390565b6060611915826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661194f9092919063ffffffff16565b8051909150156116fd57808060200190518101906119339190611ab5565b6116fd5760405162461bcd60e51b81526004016104fe90611f5a565b606061195e8484600085611966565b949350505050565b6060824710156119885760405162461bcd60e51b81526004016104fe90611e0c565b61199185611a34565b6119ad5760405162461bcd60e51b81526004016104fe90611f23565b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516119d79190611c2c565b60006040518083038185875af1925050503d8060008114611a14576040519150601f19603f3d011682016040523d82523d6000602084013e611a19565b606091505b5091509150611a29828286611a3e565b979650505050505050565b803b15155b919050565b60608315611a4d5750816115ac565b825115611a5d5782518084602001fd5b8160405162461bcd60e51b81526004016104fe9190611d84565b803573ffffffffffffffffffffffffffffffffffffffff81168114611a3957600080fd5b600060208284031215611aac578081fd5b6115ac82611a77565b600060208284031215611ac6578081fd5b81516115ac81612155565b600060208284031215611ae2578081fd5b5035919050565b600060208284031215611afa578081fd5b5051919050565b60008060408385031215611b13578081fd5b82359150611b2360208401611a77565b90509250929050565b60008060008060808587031215611b41578182fd5b84359350611b5160208601611a77565b92506040850135611b6181612155565b91506060850135611b7181612155565b939692955090935050565b60008060408385031215611b8e578182fd5b50508035926020909101359150565b600080600060608486031215611bb1578283fd5b83359250602084013591506040840135611bca81612155565b809150509250925092565b60008060008060008060c08789031215611bed578182fd5b863595506020870135945060408701359350606087013560ff81168114611c12578283fd5b9598949750929560808101359460a0909101359350915050565b60008251611c3e818460208701612129565b9190910192915050565b7f4c4f434b5f4d414e4147455200000000000000000000000000000000000000008152600c0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b73ffffffffffffffffffffffffffffffffffffffff9690961686526020860194909452604085019290925260608401526080830152151560a082015260c00190565b6000602082528251806020840152611da3816040850160208701612129565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f4d617374657259616b3a3a5f77697468647261773a20616d6f756e74203e207560408201527f7365722062616c616e6365000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f4d617374657259616b3a3a77697468647261773a20616d6f756e74206d75737460408201527f206265203e203000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526029908201527f4d617374657259616b3a3a6368616e67654f776e65723a206e6f742076616c6960408201527f6420616464726573730000000000000000000000000000000000000000000000606082015260800190565b60208082526009908201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b938452602084019290925260408301521515606082015260800190565b60005b8381101561214457818101518382015260200161212c565b838111156118295750506000910152565b801515811461074357600080fdfea26469706673582212209b1fcb38f3b3e61bf40a3824c8102f6e3c298b63f283715b9aa99186781fd7cd64736f6c63430007030033",
  "deployedBytecode": "0x60806040526004361061018f5760003560e01c8063a519121a116100d6578063d18df53c1161007f578063e6fd48bc11610059578063e6fd48bc14610440578063eacdaabc14610455578063f592c5d41461046a57610196565b8063d18df53c146103e0578063deedfdbd14610400578063e2bbb1581461042057610196565b8063acca30a2116100b0578063acca30a21461038b578063c507aeaa146103a0578063cbeb09aa146103c057610196565b8063a519121a14610334578063a6f9dae114610356578063a85adeab1461037657610196565b80635312ea8e116101385780638da5cb5b116101125780638da5cb5b146102c45780638dbb1e3a146102e657806393f1a40b1461030657610196565b80635312ea8e1461026f578063630b5ba11461028f57806364482f79146102a457610196565b8063441a3e7011610169578063441a3e701461020d578063515bc3231461022f57806351eb05a61461024f57610196565b8063081e3eda1461019b5780631526fe27146101c657806317caf6f1146101f857610196565b3661019657005b600080fd5b3480156101a757600080fd5b506101b0610472565b6040516101bd91906120df565b60405180910390f35b3480156101d257600080fd5b506101e66101e1366004611ad1565b610478565b6040516101bd96959493929190611d42565b34801561020457600080fd5b506101b06104d5565b34801561021957600080fd5b5061022d610228366004611b7c565b6104db565b005b34801561023b57600080fd5b5061022d61024a366004611bd5565b610577565b34801561025b57600080fd5b5061022d61026a366004611ad1565b610683565b34801561027b57600080fd5b5061022d61028a366004611ad1565b610746565b34801561029b57600080fd5b5061022d6108fb565b3480156102b057600080fd5b5061022d6102bf366004611b9d565b610919565b3480156102d057600080fd5b506102d9610a25565b6040516101bd9190611c71565b3480156102f257600080fd5b506101b0610301366004611b7c565b610a41565b34801561031257600080fd5b50610326610321366004611b01565b610a7b565b6040516101bd9291906120e8565b34801561034057600080fd5b50610349610a9f565b6040516101bd9190611d37565b34801561036257600080fd5b5061022d610371366004611a9b565b610ad6565b34801561038257600080fd5b506101b0610bf2565b34801561039757600080fd5b506102d9610bf8565b3480156103ac57600080fd5b5061022d6103bb366004611b2c565b610c14565b3480156103cc57600080fd5b5061022d6103db366004611ad1565b610e9b565b3480156103ec57600080fd5b506101b06103fb366004611b01565b610f0e565b34801561040c57600080fd5b5061022d61041b366004611a9b565b61102e565b34801561042c57600080fd5b5061022d61043b366004611b7c565b611106565b34801561044c57600080fd5b506101b0611172565b34801561046157600080fd5b506101b0611178565b61022d61117e565b60045490565b6004818154811061048557fe5b600091825260209091206006909102018054600182015460028301546003840154600485015460059095015473ffffffffffffffffffffffffffffffffffffffff90941695509193909260ff1686565b60065481565b600260005414156105075760405162461bcd60e51b81526004016104fe90612014565b60405180910390fd5b6002600055806105295760405162461bcd60e51b81526004016104fe90611fb7565b60006004838154811061053857fe5b6000918252602080832086845260058252604080852033865290925292206006909102909101915061056c848484846111bf565b505060016000555050565b6002600054141561059a5760405162461bcd60e51b81526004016104fe90612014565b6002600090815560048054889081106105af57fe5b600091825260208083208a845260058252604080852033808752935293849020600690930201805493517fd505accf000000000000000000000000000000000000000000000000000000008152909450919273ffffffffffffffffffffffffffffffffffffffff169163d505accf916106369130908c908c908c908c908c90600401611c92565b600060405180830381600087803b15801561065057600080fd5b505af1158015610664573d6000803e3d6000fd5b505050506106748888848461139b565b50506001600055505050505050565b60006004828154811061069257fe5b90600052602060002090600602019050806002015442116106b35750610743565b6004810154806106ca575042600290910155610743565b60006106da836002015442610a41565b9050600061070d60065461070786600101546107016003548761157290919063ffffffff16565b90611572565b906115b3565b9050610730610725846107078464e8d4a51000611572565b6003860154906115f5565b6003850155505042600290920191909155505b50565b600260005414156107695760405162461bcd60e51b81526004016104fe90612014565b60026000908155600480548390811061077e57fe5b600091825260208083208584526005825260408085203386529092529220805460069092029092019250156108f157600582015460ff161561086d57600254825482546040517fbc3e1b7a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384169363bc3e1b7a936108199333939290911691600401611ce0565b602060405180830381600087803b15801561083357600080fd5b505af1158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b9190611ae9565b505b8054600483015461087d9161161a565b6004830155805482546108aa9173ffffffffffffffffffffffffffffffffffffffff90911690339061165c565b8054604051849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae0595916108de916120df565b60405180910390a3600080825560018201555b5050600160005550565b60005b6004548110156107435761091181610683565b6001016108fe565b60015473ffffffffffffffffffffffffffffffffffffffff1633146109505760405162461bcd60e51b81526004016104fe906120a8565b801561095e5761095e6108fb565b61099b826109956004868154811061097257fe5b90600052602060002090600602016001015460065461161a90919063ffffffff16565b906115f5565b600681905550827fb0a2ded49817748754bcca0474b24011f01d4574dd5c40e14197ffa2e6540fef600485815481106109d057fe5b906000526020600020906006020160010154846006546040516109f5939291906120f6565b60405180910390a28160048481548110610a0b57fe5b906000526020600020906006020160010181905550505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6000806008548311610a535782610a57565b6008545b9050838111610a67576000610a71565b610a71818561161a565b9150505b92915050565b60056020908152600092835260408084209091529082529020805460019091015482565b60006007544210158015610ab557506008544211155b8015610ac357506000600654115b610ace576000610ad1565b60015b905090565b60015473ffffffffffffffffffffffffffffffffffffffff163314610b0d5760405162461bcd60e51b81526004016104fe906120a8565b73ffffffffffffffffffffffffffffffffffffffff811615801590610b48575073ffffffffffffffffffffffffffffffffffffffff81163014155b610b645760405162461bcd60e51b81526004016104fe9061204b565b60015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e90600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60085481565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff163314610c4b5760405162461bcd60e51b81526004016104fe906120a8565b8115610c5957610c596108fb565b60006007544211610c6c57600754610c6e565b425b905060065460001415610c8357610c83611702565b600654610c9090866115f5565b60069081556040805160c08101825273ffffffffffffffffffffffffffffffffffffffff878116808352602083018a8152838501878152600060608601818152608087018281528b151560a08901908152600480546001810182559481905298517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b948c0294850180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919099161790975593517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c83015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d82015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e82015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f82015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a090920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169215159290921790915590549254915190927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01917ff50ac550196e2285186793081082f8c6e157ff102761144feb3416d01d7c5d6591610e8c918a918790899061210c565b60405180910390a35050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610ed25760405162461bcd60e51b81526004016104fe906120a8565b6003546040518291907f6c5ac63fafcfaaa35808336a9aef07619736abe0349beeb783a3a8ab67936c8190600090a36003819055610743611702565b60008060048481548110610f1e57fe5b6000918252602080832087845260058252604080852073ffffffffffffffffffffffffffffffffffffffff891686529092529220600360069092029092019081015460048201546002830154929450909142118015610f7c57508015155b15610fdc576000610f91856002015442610a41565b90506000610fb860065461070788600101546107016003548761157290919063ffffffff16565b9050610fd7610fd0846107078464e8d4a51000611572565b85906115f5565b935050505b8254600090610ff69064e8d4a51000906107079086611572565b9050836001015481101561101257600095505050505050610a75565b600184015461102290829061161a565b98975050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110655760405162461bcd60e51b81526004016104fe906120a8565b60025460405173ffffffffffffffffffffffffffffffffffffffff80841692169061108f90611c48565b604051908190038120907f629c91fc9de3db5e699d8bad8523995c8e14e7f52fb91b49725e6625f2ea45f490600090a4600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600260005414156111295760405162461bcd60e51b81526004016104fe90612014565b60026000908155600480548490811061113e57fe5b6000918252602080832086845260058252604080852033865290925292206006909102909101915061056c8484848461139b565b60075481565b60035481565b60015473ffffffffffffffffffffffffffffffffffffffff1633146111b55760405162461bcd60e51b81526004016104fe906120a8565b6111bd611702565b565b80548311156111e05760405162461bcd60e51b81526004016104fe90611ec6565b6111e984610683565b600061121d826001015461121764e8d4a510006107078760030154876000015461157290919063ffffffff16565b9061161a565b825490915061122c908561161a565b80835560038401546112499164e8d4a51000916107079190611572565b6001830155801561125e5761125e3382611794565b600583015460ff161561131d5760025483546040517fbc3e1b7a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283169263bc3e1b7a926112c9923392909116908990600401611ce0565b602060405180830381600087803b1580156112e357600080fd5b505af11580156112f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131b9190611ae9565b505b600483015461132c908561161a565b600484015582546113549073ffffffffffffffffffffffffffffffffffffffff16338661165c565b843373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56886604051610e8c91906120df565b6113a484610683565b8054156113ed5760006113d9826001015461121764e8d4a510006107078760030154876000015461157290919063ffffffff16565b905080156113eb576113eb3382611794565b505b81546114119073ffffffffffffffffffffffffffffffffffffffff1633308661182f565b600482015461142090846115f5565b6004830155805461143190846115f5565b808255600383015461144e9164e8d4a51000916107079190611572565b600182015582158015906114665750600582015460ff165b1561151d5760025482546040517fbc61256e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283169263bc61256e926114c9923392909116908890600401611ce0565b602060405180830381600087803b1580156114e357600080fd5b505af11580156114f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151b9190611ae9565b505b833373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158560405161156491906120df565b60405180910390a350505050565b60008261158157506000610a75565b8282028284828161158e57fe5b04146115ac5760405162461bcd60e51b81526004016104fe90611e69565b9392505050565b60006115ac83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611850565b6000828201838110156115ac5760405162461bcd60e51b81526004016104fe90611dd5565b60006115ac83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250611887565b6116fd8363a9059cbb60e01b848460405160240161167b929190611d11565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526118b3565b505050565b600354156111bd57600060075442101561171e57600754611720565b425b9050600061174361173c600354476115b390919063ffffffff16565b83906115f5565b9050818111801561175657506008548114155b15611790576008546040518291907fc27995de4b73bfe8fa8c957b4ae89e3113185c3d9e2c6e3bf680ce10708218e590600090a360088190555b5050565b47808211156117e65760405173ffffffffffffffffffffffffffffffffffffffff84169082156108fc029083906000818181858888f193505050501580156117e0573d6000803e3d6000fd5b506116fd565b60405173ffffffffffffffffffffffffffffffffffffffff84169083156108fc029084906000818181858888f19350505050158015611829573d6000803e3d6000fd5b50505050565b611829846323b872dd60e01b85858560405160240161167b93929190611ce0565b600081836118715760405162461bcd60e51b81526004016104fe9190611d84565b50600083858161187d57fe5b0495945050505050565b600081848411156118ab5760405162461bcd60e51b81526004016104fe9190611d84565b505050900390565b6060611915826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661194f9092919063ffffffff16565b8051909150156116fd57808060200190518101906119339190611ab5565b6116fd5760405162461bcd60e51b81526004016104fe90611f5a565b606061195e8484600085611966565b949350505050565b6060824710156119885760405162461bcd60e51b81526004016104fe90611e0c565b61199185611a34565b6119ad5760405162461bcd60e51b81526004016104fe90611f23565b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516119d79190611c2c565b60006040518083038185875af1925050503d8060008114611a14576040519150601f19603f3d011682016040523d82523d6000602084013e611a19565b606091505b5091509150611a29828286611a3e565b979650505050505050565b803b15155b919050565b60608315611a4d5750816115ac565b825115611a5d5782518084602001fd5b8160405162461bcd60e51b81526004016104fe9190611d84565b803573ffffffffffffffffffffffffffffffffffffffff81168114611a3957600080fd5b600060208284031215611aac578081fd5b6115ac82611a77565b600060208284031215611ac6578081fd5b81516115ac81612155565b600060208284031215611ae2578081fd5b5035919050565b600060208284031215611afa578081fd5b5051919050565b60008060408385031215611b13578081fd5b82359150611b2360208401611a77565b90509250929050565b60008060008060808587031215611b41578182fd5b84359350611b5160208601611a77565b92506040850135611b6181612155565b91506060850135611b7181612155565b939692955090935050565b60008060408385031215611b8e578182fd5b50508035926020909101359150565b600080600060608486031215611bb1578283fd5b83359250602084013591506040840135611bca81612155565b809150509250925092565b60008060008060008060c08789031215611bed578182fd5b863595506020870135945060408701359350606087013560ff81168114611c12578283fd5b9598949750929560808101359460a0909101359350915050565b60008251611c3e818460208701612129565b9190910192915050565b7f4c4f434b5f4d414e4147455200000000000000000000000000000000000000008152600c0190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b73ffffffffffffffffffffffffffffffffffffffff9690961686526020860194909452604085019290925260608401526080830152151560a082015260c00190565b6000602082528251806020840152611da3816040850160208701612129565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f4d617374657259616b3a3a5f77697468647261773a20616d6f756e74203e207560408201527f7365722062616c616e6365000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f4d617374657259616b3a3a77697468647261773a20616d6f756e74206d75737460408201527f206265203e203000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526029908201527f4d617374657259616b3a3a6368616e67654f776e65723a206e6f742076616c6960408201527f6420616464726573730000000000000000000000000000000000000000000000606082015260800190565b60208082526009908201527f6e6f74206f776e65720000000000000000000000000000000000000000000000604082015260600190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b938452602084019290925260408301521515606082015260800190565b60005b8381101561214457818101518382015260200161212c565b838111156118295750506000910152565b801515811461074357600080fdfea26469706673582212209b1fcb38f3b3e61bf40a3824c8102f6e3c298b63f283715b9aa99186781fd7cd64736f6c63430007030033",
  "devdoc": {
    "details": "Controls rewards distribution for network",
    "kind": "dev",
    "methods": {
      "add(uint256,address,bool,bool)": {
        "details": "Can only be called by the owner. DO NOT add the same token more than once. Rewards will be messed up if you do.",
        "params": {
          "allocPoint": "Number of allocation points to allot to this token/pool",
          "token": "The token that will be staked for rewards",
          "vpForDeposit": "If true, users get voting power for deposits",
          "withUpdate": "if specified, update all pools before adding new pool"
        }
      },
      "addRewardsBalance()": {
        "details": "Can only be called by the owner"
      },
      "changeOwner(address)": {
        "details": "Can only be called by the owner",
        "params": {
          "newOwner": "New owner address"
        }
      },
      "constructor": {
        "params": {
          "_lockManager": "address of LockManager contract",
          "_owner": "owner of contract",
          "_rewardsPerSecond": "initial amount of reward tokens to be distributed per second",
          "_startTimestamp": "timestamp when rewards will start"
        }
      },
      "deposit(uint256,uint256)": {
        "params": {
          "amount": "number of tokens to deposit",
          "pid": "pool id"
        }
      },
      "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "It is up to the frontend developer to ensure the pool token implements permit - otherwise this will fail",
        "params": {
          "amount": "number of tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "pid": "pool id",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "emergencyWithdraw(uint256)": {
        "params": {
          "pid": "pool id"
        }
      },
      "getMultiplier(uint256,uint256)": {
        "params": {
          "from": "From timestamp",
          "to": "To timestamp"
        },
        "returns": {
          "_0": "multiplier"
        }
      },
      "massUpdatePools()": {
        "details": "Be careful of gas spending!"
      },
      "pendingRewards(uint256,address)": {
        "params": {
          "account": "user account to check",
          "pid": "pool id"
        },
        "returns": {
          "_0": "pending rewards"
        }
      },
      "poolLength()": {
        "returns": {
          "_0": "pool length"
        }
      },
      "set(uint256,uint256,bool)": {
        "details": "Can only be called by the owner",
        "params": {
          "allocPoint": "New number of allocation points for pool",
          "pid": "The RewardManager pool id",
          "withUpdate": "if specified, update all pools before setting allocation points"
        }
      },
      "setLockManager(address)": {
        "params": {
          "newAddress": "address of new LockManager"
        }
      },
      "setRewardsPerSecond(uint256)": {
        "details": "Can only be called by the owner",
        "params": {
          "newRewardsPerSecond": "new amount of rewards to reward each second"
        }
      },
      "updatePool(uint256)": {
        "params": {
          "pid": "pool id"
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "amount": "number of tokens to withdraw",
          "pid": "pool id"
        }
      }
    },
    "title": "MasterYak",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ChangedAddress(string,address,address)": {
        "notice": "Event emitted when contract address is changed"
      },
      "ChangedOwner(address,address)": {
        "notice": "Event emitted when the owner of the rewards manager contract is updated"
      },
      "ChangedRewardsEndTimestamp(uint256,uint256)": {
        "notice": "Event emitted when the rewards end timestamp is updated"
      },
      "ChangedRewardsPerSecond(uint256,uint256)": {
        "notice": "Event emitted when the amount of reward tokens per seconds is updated"
      },
      "Deposit(address,uint256,uint256)": {
        "notice": "Event emitted when a user deposits funds in the rewards manager"
      },
      "EmergencyWithdraw(address,uint256,uint256)": {
        "notice": "Event emitted when a user withdraws their original funds from the rewards manager without claiming rewards"
      },
      "PoolAdded(uint256,address,uint256,uint256,uint256,bool)": {
        "notice": "Event emitted when new pool is added to the rewards manager"
      },
      "PoolUpdated(uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when pool allocation points are updated"
      },
      "SetRewardsStartTimestamp(uint256)": {
        "notice": "Event emitted when the rewards start timestamp is set"
      },
      "Withdraw(address,uint256,uint256)": {
        "notice": "Event emitted when a user withdraws their original funds + rewards from the rewards manager"
      }
    },
    "kind": "user",
    "methods": {
      "add(uint256,address,bool,bool)": {
        "notice": "Add a new reward token to the pool"
      },
      "addRewardsBalance()": {
        "notice": "Add rewards to contract"
      },
      "changeOwner(address)": {
        "notice": "Change owner of vesting contract"
      },
      "constructor": {
        "notice": "Create a new Rewards Manager contract"
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposit tokens to MasterYak for rewards allocation."
      },
      "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit tokens to MasterYak for rewards allocation, using permit for approval"
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Withdraw without caring about rewards. EMERGENCY ONLY."
      },
      "endTimestamp()": {
        "notice": "The timestamp when rewards end."
      },
      "getMultiplier(uint256,uint256)": {
        "notice": "Return reward multiplier over the given from to to timestamp."
      },
      "lockManager()": {
        "notice": "LockManager contract"
      },
      "massUpdatePools()": {
        "notice": "Update reward variables for all pools"
      },
      "owner()": {
        "notice": "Current owner of this contract"
      },
      "pendingRewards(uint256,address)": {
        "notice": "View function to see pending rewards on frontend."
      },
      "poolInfo(uint256)": {
        "notice": "Info of each pool."
      },
      "poolLength()": {
        "notice": "View function to see current poolInfo array length"
      },
      "rewardsActive()": {
        "notice": "Returns true if rewards are actively being accumulated"
      },
      "rewardsPerSecond()": {
        "notice": "Rewards rewarded per second"
      },
      "set(uint256,uint256,bool)": {
        "notice": "Update the given pool's allocation points"
      },
      "setLockManager(address)": {
        "notice": "Set new LockManager address"
      },
      "setRewardsPerSecond(uint256)": {
        "notice": "Set new rewards per second"
      },
      "startTimestamp()": {
        "notice": "The timestamp when rewards start."
      },
      "totalAllocPoint()": {
        "notice": "Total allocation points. Must be the sum of all allocation points in all pools."
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables of the given pool to be up-to-date"
      },
      "userInfo(uint256,address)": {
        "notice": "Info of each user that stakes tokens"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw tokens from MasterYak, claiming rewards."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8703,
        "contract": "contracts/MasterYak.sol:MasterYak",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1447,
        "contract": "contracts/MasterYak.sol:MasterYak",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1468,
        "contract": "contracts/MasterYak.sol:MasterYak",
        "label": "lockManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ILockManager)6502"
      },
      {
        "astId": 1471,
        "contract": "contracts/MasterYak.sol:MasterYak",
        "label": "rewardsPerSecond",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1475,
        "contract": "contracts/MasterYak.sol:MasterYak",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(PoolInfo)1465_storage)dyn_storage"
      },
      {
        "astId": 1482,
        "contract": "contracts/MasterYak.sol:MasterYak",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1452_storage))"
      },
      {
        "astId": 1485,
        "contract": "contracts/MasterYak.sol:MasterYak",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1488,
        "contract": "contracts/MasterYak.sol:MasterYak",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1491,
        "contract": "contracts/MasterYak.sol:MasterYak",
        "label": "endTimestamp",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)1465_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)1465_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterYak.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)6444": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILockManager)6502": {
        "encoding": "inplace",
        "label": "contract ILockManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)1452_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterYak.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1452_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1452_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MasterYak.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)1452_storage)"
      },
      "t_struct(PoolInfo)1465_storage": {
        "encoding": "inplace",
        "label": "struct MasterYak.PoolInfo",
        "members": [
          {
            "astId": 1454,
            "contract": "contracts/MasterYak.sol:MasterYak",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)6444"
          },
          {
            "astId": 1456,
            "contract": "contracts/MasterYak.sol:MasterYak",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1458,
            "contract": "contracts/MasterYak.sol:MasterYak",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1460,
            "contract": "contracts/MasterYak.sol:MasterYak",
            "label": "accRewardsPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1462,
            "contract": "contracts/MasterYak.sol:MasterYak",
            "label": "totalStaked",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1464,
            "contract": "contracts/MasterYak.sol:MasterYak",
            "label": "vpForDeposit",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)1452_storage": {
        "encoding": "inplace",
        "label": "struct MasterYak.UserInfo",
        "members": [
          {
            "astId": 1449,
            "contract": "contracts/MasterYak.sol:MasterYak",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1451,
            "contract": "contracts/MasterYak.sol:MasterYak",
            "label": "rewardTokenDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}