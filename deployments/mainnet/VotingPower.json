{
  "address": "0x1A89939f66a04e61ab2389851b7D9dc483e6fd35",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "ChangedOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "VotingPowerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addVotingPowerForLockedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PrismProxy",
          "name": "prism",
          "type": "address"
        }
      ],
      "name": "become",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        }
      ],
      "name": "getAmountStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Stake",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_yakToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeVotingPowerForUnlockedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLockManager",
          "type": "address"
        }
      ],
      "name": "setLockManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "setTokenRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "stakeWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yakToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x72a6d7ee0ea643104a122764bc556aa97a78881850fa3db5b861cd34edabfb06",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x1A89939f66a04e61ab2389851b7D9dc483e6fd35",
    "transactionIndex": 2,
    "gasUsed": "2243899",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x24cfb4495fe2837e4757e1decfc4cb2b8bebfd6703dfaa8a9bddee46431ad65e",
    "transactionHash": "0x72a6d7ee0ea643104a122764bc556aa97a78881850fa3db5b861cd34edabfb06",
    "logs": [],
    "blockNumber": 2925057,
    "cumulativeGasUsed": "2462812",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cbca27c4fdf8e9078ea5771556254fe0",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"VotingPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVotingPowerForLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PrismProxy\",\"name\":\"prism\",\"type\":\"address\"}],\"name\":\"become\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"getAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yakToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeVotingPowerForUnlockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLockManager\",\"type\":\"address\"}],\"name\":\"setLockManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setTokenRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yakToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation contract for voting power prism proxy Calls should not be made directly to this contract, instead make calls to the VotingPowerPrism proxy contract The exception to this is the `become` function specified in PrismProxyImplementation  This function is called once and is used by this contract to accept its role as the implementation for the prism proxy\",\"kind\":\"dev\",\"methods\":{\"addVotingPowerForLockedTokens(address,uint256)\":{\"params\":{\"account\":\"The recipient of voting power\",\"amount\":\"The amount of voting power to add\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"balanceOfAt(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"become(address)\":{\"params\":{\"prism\":\"Prism Proxy contract\"}},\"changeOwner(address)\":{\"params\":{\"newOwner\":\"New owner address\"}},\"decimals()\":{\"returns\":{\"_0\":\"decimals\"}},\"getAmountStaked(address,address)\":{\"params\":{\"stakedToken\":\"The staked token\",\"staker\":\"The user with staked tokens\"},\"returns\":{\"_0\":\"total amount staked\"}},\"getStake(address,address)\":{\"params\":{\"stakedToken\":\"The staked token\",\"staker\":\"The user with staked tokens\"},\"returns\":{\"_0\":\"total staked\"}},\"initialize(address)\":{\"details\":\"Should be called via VotingPowerPrism before calling anything else\",\"params\":{\"_yakToken\":\"address of YAK token\"}},\"lockManager()\":{\"returns\":{\"_0\":\"Address of lockManager\"}},\"owner()\":{\"returns\":{\"_0\":\"Address of owner\"}},\"removeVotingPowerForUnlockedTokens(address,uint256)\":{\"params\":{\"account\":\"The account with voting power\",\"amount\":\"The amount of voting power to remove\"}},\"setLockManager(address)\":{\"params\":{\"newLockManager\":\"Address of lockManager\"}},\"setTokenRegistry(address)\":{\"params\":{\"registry\":\"Address of token registry\"}},\"stake(address,uint256)\":{\"params\":{\"amount\":\"The amount to stake\",\"token\":\"The token to stake\"}},\"stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"The amount to stake\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"tokenRegistry()\":{\"returns\":{\"_0\":\"Address of token registry\"}},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"The amount to withdraw\",\"token\":\"The token to withdraw\"}},\"yakToken()\":{\"returns\":{\"_0\":\"Address of YAK token\"}}},\"title\":\"VotingPower\",\"version\":1},\"userdoc\":{\"events\":{\"ChangedOwner(address,address)\":{\"notice\":\"Event emitted when the owner of the voting power contract is updated\"},\"Staked(address,address,uint256,uint256)\":{\"notice\":\"An event that's emitted when a user's staked balance increases\"},\"VotingPowerChanged(address,uint256,uint256)\":{\"notice\":\"An event that's emitted when an account's vote balance changes\"},\"Withdrawn(address,address,uint256,uint256)\":{\"notice\":\"An event that's emitted when a user's staked balance decreases\"}},\"kind\":\"user\",\"methods\":{\"addVotingPowerForLockedTokens(address,uint256)\":{\"notice\":\"Count locked tokens toward voting power for `account`\"},\"balanceOf(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"balanceOfAt(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"become(address)\":{\"notice\":\"Accept invitation to be implementation contract for proxy\"},\"changeOwner(address)\":{\"notice\":\"Change owner of the contract\"},\"decimals()\":{\"notice\":\"Decimals used for voting power\"},\"getAmountStaked(address,address)\":{\"notice\":\"Get total amount of tokens staked in contract by `staker`\"},\"getStake(address,address)\":{\"notice\":\"Get total staked amount and voting power from `stakedToken` staked in contract by `staker`\"},\"initialize(address)\":{\"notice\":\"Initialize VotingPower contract\"},\"lockManager()\":{\"notice\":\"Address of lockManager\"},\"owner()\":{\"notice\":\"Address of owner\"},\"removeVotingPowerForUnlockedTokens(address,uint256)\":{\"notice\":\"Remove unlocked tokens from voting power for `account`\"},\"setLockManager(address)\":{\"notice\":\"Sets lockManager address\"},\"setTokenRegistry(address)\":{\"notice\":\"Sets token registry address\"},\"stake(address,uint256)\":{\"notice\":\"Stake LP tokens to unlock voting power for `msg.sender`\"},\"stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Stake YAK tokens using offchain approvals to unlock voting power\"},\"tokenRegistry()\":{\"notice\":\"Address of token registry\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw staked LP tokens, removing voting power for `msg.sender`\"},\"yakToken()\":{\"notice\":\"Address of YAK token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotingPower.sol\":\"VotingPower\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"contracts/VotingPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IVotingPowerFormula.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/ReentrancyGuardUpgradeSafe.sol\\\";\\nimport \\\"./lib/PrismProxyImplementation.sol\\\";\\nimport \\\"./lib/VotingPowerStorage.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @title VotingPower\\n * @dev Implementation contract for voting power prism proxy\\n * Calls should not be made directly to this contract, instead make calls to the VotingPowerPrism proxy contract\\n * The exception to this is the `become` function specified in PrismProxyImplementation \\n * This function is called once and is used by this contract to accept its role as the implementation for the prism proxy\\n */\\ncontract VotingPower is PrismProxyImplementation, ReentrancyGuardUpgradeSafe {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice An event that's emitted when a user's staked balance increases\\n    event Staked(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\n    /// @notice An event that's emitted when a user's staked balance decreases\\n    event Withdrawn(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\n    /// @notice An event that's emitted when an account's vote balance changes\\n    event VotingPowerChanged(address indexed voter, uint256 indexed previousBalance, uint256 indexed newBalance);\\n\\n    /// @notice Event emitted when the owner of the voting power contract is updated\\n    event ChangedOwner(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice restrict functions to just owner address\\n    modifier onlyOwner {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(app.owner == address(0) || msg.sender == app.owner, \\\"only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize VotingPower contract\\n     * @dev Should be called via VotingPowerPrism before calling anything else\\n     * @param _yakToken address of YAK token\\n     */\\n    function initialize(\\n        address _yakToken\\n    ) public initializer {\\n        __ReentrancyGuard_init_unchained();\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        app.yakToken = IYakToken(_yakToken);\\n    }\\n\\n    /**\\n     * @notice Address of YAK token\\n     * @return Address of YAK token\\n     */\\n    function yakToken() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return address(app.yakToken);\\n    }\\n\\n    /**\\n     * @notice Decimals used for voting power\\n     * @return decimals\\n     */\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @notice Address of token registry\\n     * @return Address of token registry\\n     */\\n    function tokenRegistry() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return address(app.tokenRegistry);\\n    }\\n\\n    /**\\n     * @notice Address of lockManager\\n     * @return Address of lockManager\\n     */\\n    function lockManager() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return app.lockManager;\\n    }\\n\\n    /**\\n     * @notice Address of owner\\n     * @return Address of owner\\n     */\\n    function owner() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return app.owner;\\n    }\\n\\n    /**\\n     * @notice Sets token registry address\\n     * @param registry Address of token registry\\n     */\\n    function setTokenRegistry(address registry) public onlyOwner {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        app.tokenRegistry = ITokenRegistry(registry);\\n    }\\n\\n    /**\\n     * @notice Sets lockManager address\\n     * @param newLockManager Address of lockManager\\n     */\\n    function setLockManager(address newLockManager) public onlyOwner {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        app.lockManager = newLockManager;\\n    }\\n\\n    /**\\n     * @notice Change owner of the contract\\n     * @param newOwner New owner address\\n     */\\n    function changeOwner(address newOwner) external onlyOwner {\\n        require(newOwner != address(0) && newOwner != address(this), \\\"VP::changeOwner: not valid address\\\");\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        emit ChangedOwner(app.owner, newOwner);\\n        app.owner = newOwner;   \\n    }\\n\\n    /**\\n     * @notice Stake YAK tokens using offchain approvals to unlock voting power\\n     * @param amount The amount to stake\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function stakeWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external nonReentrant {\\n        require(amount > 0, \\\"VP::stakeWithPermit: cannot stake 0\\\");\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(app.yakToken.balanceOf(msg.sender) >= amount, \\\"VP::stakeWithPermit: not enough tokens\\\");\\n\\n        app.yakToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n\\n        address tokenFormulaAddress = app.tokenRegistry.tokenFormulas(address(app.yakToken));\\n        require(tokenFormulaAddress != address(0), \\\"VP::stake: token not supported\\\");\\n        \\n        IVotingPowerFormula tokenFormula = IVotingPowerFormula(address(app.yakToken));\\n        uint256 votingPower = tokenFormula.convertTokensToVotingPower(amount);\\n        _stake(msg.sender, address(app.yakToken), amount, votingPower);\\n    }\\n\\n    /**\\n     * @notice Stake LP tokens to unlock voting power for `msg.sender`\\n     * @param token The token to stake\\n     * @param amount The amount to stake\\n     */\\n    function stake(address token, uint256 amount) external nonReentrant {\\n        IERC20 lptoken = IERC20(token);\\n        require(amount > 0, \\\"VP::stake: cannot stake 0\\\");\\n        require(lptoken.balanceOf(msg.sender) >= amount, \\\"VP::stake: not enough tokens\\\");\\n        require(lptoken.allowance(msg.sender, address(this)) >= amount, \\\"VP::stake: must approve tokens before staking\\\");\\n\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        address tokenFormulaAddress = app.tokenRegistry.tokenFormulas(token);\\n        require(tokenFormulaAddress != address(0), \\\"VP::stake: token not supported\\\");\\n        \\n        IVotingPowerFormula tokenFormula = IVotingPowerFormula(tokenFormulaAddress);\\n        uint256 votingPower = tokenFormula.convertTokensToVotingPower(amount);\\n        _stake(msg.sender, token, amount, votingPower);\\n    }\\n\\n    /**\\n     * @notice Count locked tokens toward voting power for `account`\\n     * @param account The recipient of voting power\\n     * @param amount The amount of voting power to add\\n     */\\n    function addVotingPowerForLockedTokens(address account, uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"VP::addVPforLT: cannot add 0 voting power\\\");\\n        require(msg.sender == app.lockManager, \\\"VP::addVPforLT: only lockManager contract\\\");\\n\\n        _increaseVotingPower(account, amount);\\n    }\\n\\n    /**\\n     * @notice Remove unlocked tokens from voting power for `account`\\n     * @param account The account with voting power\\n     * @param amount The amount of voting power to remove\\n     */\\n    function removeVotingPowerForUnlockedTokens(address account, uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"VP::removeVPforUT: cannot remove 0 voting power\\\");\\n        require(msg.sender == app.lockManager, \\\"VP::removeVPforUT: only lockManager contract\\\");\\n\\n        _decreaseVotingPower(account, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked LP tokens, removing voting power for `msg.sender`\\n     * @param token The token to withdraw\\n     * @param amount The amount to withdraw\\n     */\\n    function withdraw(address token, uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"VP::withdraw: cannot withdraw 0\\\");\\n        Stake memory s = getStake(msg.sender, token);\\n        uint256 vpToWithdraw = amount.mul(s.votingPower).div(s.amount);\\n        _withdraw(msg.sender, token, amount, vpToWithdraw);\\n    }\\n\\n    /**\\n     * @notice Get total amount of tokens staked in contract by `staker`\\n     * @param staker The user with staked tokens\\n     * @param stakedToken The staked token\\n     * @return total amount staked\\n     */\\n    function getAmountStaked(address staker, address stakedToken) public view returns (uint256) {\\n        return getStake(staker, stakedToken).amount;\\n    }\\n\\n    /**\\n     * @notice Get total staked amount and voting power from `stakedToken` staked in contract by `staker`\\n     * @param staker The user with staked tokens\\n     * @param stakedToken The staked token\\n     * @return total staked\\n     */\\n    function getStake(address staker, address stakedToken) public view returns (Stake memory) {\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        return ss.stakes[staker][stakedToken];\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 nCheckpoints = cs.numCheckpoints[account];\\n        return nCheckpoints > 0 ? cs.checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function balanceOfAt(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"VP::balanceOfAt: not yet determined\\\");\\n        \\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 nCheckpoints = cs.numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (cs.checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return cs.checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (cs.checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = cs.checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return cs.checkpoints[account][lower].votes;\\n    }\\n\\n    /**\\n     * @notice Internal implementation of stake\\n     * @param voter The user that is staking tokens\\n     * @param token The token to stake\\n     * @param tokenAmount The amount of token to stake\\n     * @param votingPower The amount of voting power stake translates into\\n     */\\n    function _stake(address voter, address token, uint256 tokenAmount, uint256 votingPower) internal {\\n        IERC20(token).safeTransferFrom(voter, address(this), tokenAmount);\\n\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        ss.stakes[voter][token].amount = ss.stakes[voter][token].amount.add(tokenAmount);\\n        ss.stakes[voter][token].votingPower = ss.stakes[voter][token].votingPower.add(votingPower);\\n\\n        emit Staked(voter, token, tokenAmount, votingPower);\\n\\n        _increaseVotingPower(voter, votingPower);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of withdraw\\n     * @param voter The user with tokens staked\\n     * @param token The token that is staked\\n     * @param tokenAmount The amount of token to withdraw\\n     * @param votingPower The amount of voting power stake translates into\\n     */\\n    function _withdraw(address voter, address token, uint256 tokenAmount, uint256 votingPower) internal {\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        require(ss.stakes[voter][token].amount >= tokenAmount, \\\"VP::_withdraw: not enough tokens staked\\\");\\n        require(ss.stakes[voter][token].votingPower >= votingPower, \\\"VP::_withdraw: not enough voting power\\\");\\n        ss.stakes[voter][token].amount = ss.stakes[voter][token].amount.sub(tokenAmount);\\n        ss.stakes[voter][token].votingPower = ss.stakes[voter][token].votingPower.sub(votingPower);\\n        \\n        IERC20(token).safeTransfer(voter, tokenAmount);\\n\\n        emit Withdrawn(voter, token, tokenAmount, votingPower);\\n        \\n        _decreaseVotingPower(voter, votingPower);\\n    }\\n\\n    /**\\n     * @notice Increase voting power of voter\\n     * @param voter The voter whose voting power is increasing \\n     * @param amount The amount of voting power to increase by\\n     */\\n    function _increaseVotingPower(address voter, uint256 amount) internal {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 checkpointNum = cs.numCheckpoints[voter];\\n        uint256 votingPowerOld = checkpointNum > 0 ? cs.checkpoints[voter][checkpointNum - 1].votes : 0;\\n        uint256 votingPowerNew = votingPowerOld.add(amount);\\n        _writeCheckpoint(voter, checkpointNum, votingPowerOld, votingPowerNew);\\n    }\\n\\n    /**\\n     * @notice Decrease voting power of voter\\n     * @param voter The voter whose voting power is decreasing \\n     * @param amount The amount of voting power to decrease by\\n     */\\n    function _decreaseVotingPower(address voter, uint256 amount) internal {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 checkpointNum = cs.numCheckpoints[voter];\\n        uint256 votingPowerOld = checkpointNum > 0 ? cs.checkpoints[voter][checkpointNum - 1].votes : 0;\\n        uint256 votingPowerNew = votingPowerOld.sub(amount);\\n        _writeCheckpoint(voter, checkpointNum, votingPowerOld, votingPowerNew);\\n    }\\n\\n    /**\\n     * @notice Create checkpoint of voting power for voter at current block number\\n     * @param voter The voter whose voting power is changing\\n     * @param nCheckpoints The current checkpoint number for voter\\n     * @param oldVotes The previous voting power of this voter\\n     * @param newVotes The new voting power of this voter\\n     */\\n    function _writeCheckpoint(address voter, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {\\n      uint32 blockNumber = _safe32(block.number, \\\"VP::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n      CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n      if (nCheckpoints > 0 && cs.checkpoints[voter][nCheckpoints - 1].fromBlock == blockNumber) {\\n          cs.checkpoints[voter][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          cs.checkpoints[voter][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          cs.numCheckpoints[voter] = nCheckpoints + 1;\\n      }\\n\\n      emit VotingPowerChanged(voter, oldVotes, newVotes);\\n    }\\n\\n    /**\\n     * @notice Converts uint256 to uint32 safely\\n     * @param n Number\\n     * @param errorMessage Error message to use if number cannot be converted\\n     * @return uint32 number\\n     */\\n    function _safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n}\",\"keccak256\":\"0x0840c415256ba9a361606f37b5b21b5829ce307dc70f2aafc7d083d7dc72ba5d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface ITokenRegistry {\\n    function owner() external view returns (address);\\n    function tokenFormulas(address) external view returns (address);\\n    function setTokenFormula(address token, address formula) external;\\n    function removeToken(address token) external;\\n    function changeOwner(address newOwner) external;\\n    event ChangedOwner(address indexed oldOwner, address indexed newOwner);\\n    event TokenAdded(address indexed token, address indexed formula);\\n    event TokenRemoved(address indexed token);\\n}\",\"keccak256\":\"0xb34b46ec62a293095f0cc5e657996226c0bde9282d70f123730cdca63f22f827\",\"license\":\"MIT\"},\"contracts/interfaces/IVotingPowerFormula.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IVotingPowerFormula {\\n    function convertTokensToVotingPower(uint256 amount) external view returns (uint256);\\n}\",\"keccak256\":\"0xe438e4185664ffa43e2543f2687e1fca4873da37976c911a38630627490e61dd\",\"license\":\"MIT\"},\"contracts/interfaces/IYakToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IYakToken {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x8ef6d5188f28d2df12a375084cba17f2be22ea1e93917d7ba4fffcdcefe714e8\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x3200dad4899dfc4a7b22d84e4b3768f23f50fd161c5b5997d6ae7004d90b0a94\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\",\"keccak256\":\"0x9a89a53c389e07d6dc2b81846031205cf32a92158a64a6adb70338ab1461b81b\",\"license\":\"MIT\"},\"contracts/lib/PrismProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ncontract PrismProxy {\\n\\n    /// @notice Proxy admin and implementation storage variables\\n    struct ProxyStorage {\\n        // Administrator for this contract\\n        address admin;\\n\\n        // Pending administrator for this contract\\n        address pendingAdmin;\\n\\n        // Active implementation of this contract\\n        address implementation;\\n\\n        // Pending implementation of this contract\\n        address pendingImplementation;\\n\\n        // Implementation version of this contract\\n        uint8 version;\\n    }\\n\\n    /// @dev Position in contract storage where prism ProxyStorage struct will be stored\\n    bytes32 constant PRISM_PROXY_STORAGE_POSITION = keccak256(\\\"prism.proxy.storage\\\");\\n\\n    /// @notice Emitted when pendingImplementation is changed\\n    event NewPendingImplementation(address indexed oldPendingImplementation, address indexed newPendingImplementation);\\n\\n    /// @notice Emitted when pendingImplementation is accepted, which means implementation is updated\\n    event NewImplementation(address indexed oldImplementation, address indexed newImplementation);\\n\\n    /// @notice Emitted when pendingAdmin is changed\\n    event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin);\\n\\n    /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n    event NewAdmin(address indexed oldAdmin, address indexed newAdmin);\\n\\n    /**\\n     * @notice Load proxy storage struct from specified PRISM_PROXY_STORAGE_POSITION\\n     * @return ps ProxyStorage struct\\n     */\\n    function proxyStorage() internal pure returns (ProxyStorage storage ps) {        \\n        bytes32 position = PRISM_PROXY_STORAGE_POSITION;\\n        assembly {\\n            ps.slot := position\\n        }\\n    }\\n\\n    /*** Admin Functions ***/\\n    \\n    /**\\n     * @notice Create new pending implementation for prism. msg.sender must be admin\\n     * @dev Admin function for proposing new implementation contract\\n     * @return boolean indicating success of operation\\n     */\\n    function setPendingProxyImplementation(address newPendingImplementation) public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        require(msg.sender == s.admin, \\\"Prism::setPendingProxyImp: caller must be admin\\\");\\n\\n        address oldPendingImplementation = s.pendingImplementation;\\n\\n        s.pendingImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, s.pendingImplementation);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Accepts new implementation for prism. msg.sender must be pendingImplementation\\n     * @dev Admin function for new implementation to accept it's role as implementation\\n     * @return boolean indicating success of operation\\n     */\\n    function acceptProxyImplementation() public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n        require(msg.sender == s.pendingImplementation && s.pendingImplementation != address(0), \\\"Prism::acceptProxyImp: caller must be pending implementation\\\");\\n \\n        // Save current values for inclusion in log\\n        address oldImplementation = s.implementation;\\n        address oldPendingImplementation = s.pendingImplementation;\\n\\n        s.implementation = s.pendingImplementation;\\n\\n        s.pendingImplementation = address(0);\\n        s.version++;\\n\\n        emit NewImplementation(oldImplementation, s.implementation);\\n        emit NewPendingImplementation(oldPendingImplementation, s.pendingImplementation);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return boolean indicating success of operation\\n     */\\n    function setPendingProxyAdmin(address newPendingAdmin) public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        // Check caller = admin\\n        require(msg.sender == s.admin, \\\"Prism::setPendingProxyAdmin: caller must be admin\\\");\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = s.pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        s.pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return boolean indicating success of operation\\n     */\\n    function acceptProxyAdmin() public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        require(msg.sender == s.pendingAdmin && msg.sender != address(0), \\\"Prism::acceptProxyAdmin: caller must be pending admin\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = s.admin;\\n        address oldPendingAdmin = s.pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        s.admin = s.pendingAdmin;\\n\\n        // Clear the pending value\\n        s.pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, s.admin);\\n        emit NewPendingAdmin(oldPendingAdmin, s.pendingAdmin);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get current admin for prism proxy\\n     * @return admin address\\n     */\\n    function proxyAdmin() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.admin;\\n    }\\n\\n    /**\\n     * @notice Get pending admin for prism proxy\\n     * @return admin address\\n     */\\n    function pendingProxyAdmin() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.pendingAdmin;\\n    }\\n\\n    /**\\n     * @notice Address of implementation contract\\n     * @return implementation address\\n     */\\n    function proxyImplementation() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.implementation;\\n    }\\n\\n    /**\\n     * @notice Address of pending implementation contract\\n     * @return pending implementation address\\n     */\\n    function pendingProxyImplementation() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.pendingImplementation;\\n    }\\n\\n    /**\\n     * @notice Current implementation version for proxy\\n     * @return version number\\n     */\\n    function proxyImplementationVersion() public view returns (uint8) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.version;\\n    }\\n\\n    /**\\n     * @notice Delegates execution to an implementation contract.\\n     * @dev Returns to the external caller whatever the implementation returns or forwards reverts\\n     */\\n    function _forwardToImplementation() internal {\\n        ProxyStorage storage s = proxyStorage();\\n        // delegate all other functions to current implementation\\n        (bool success, ) = s.implementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize()) }\\n              default { return(free_mem_ptr, returndatasize()) }\\n        }\\n    }\\n}\",\"keccak256\":\"0x3d2b33b87048fa03f347e9b6f97031a142b565f7d56990d5b923ae65c5ddab37\",\"license\":\"MIT\"},\"contracts/lib/PrismProxyImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./PrismProxy.sol\\\";\\n\\ncontract PrismProxyImplementation is Initializable {\\n    /**\\n     * @notice Accept invitation to be implementation contract for proxy\\n     * @param prism Prism Proxy contract\\n     */\\n    function become(PrismProxy prism) public {\\n        require(msg.sender == prism.proxyAdmin(), \\\"Prism::become: only proxy admin can change implementation\\\");\\n        require(prism.acceptProxyImplementation() == true, \\\"Prism::become: change not authorized\\\");\\n    }\\n}\",\"keccak256\":\"0xc803c1014ed778b97b7f65eff92b2495b5cffcb0417b0cab2af43705b4780a53\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuardUpgradeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xdf39f09d248373bd20248fffa5282b241f068e3f7168326cb257a5673d8cec7b\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xf5c6f7a4e202733b9bea8dc0c4be4bc16f765c08079418eb426ad490d9f4142e\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"},\"contracts/lib/VotingPowerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../interfaces/IYakToken.sol\\\";\\r\\nimport \\\"../interfaces/ITokenRegistry.sol\\\";\\r\\n\\r\\n/// @notice App metadata storage\\r\\nstruct AppStorage {\\r\\n    // A record of states for signing / validating signatures\\r\\n    mapping (address => uint) nonces;\\r\\n\\r\\n    // YAK token\\r\\n    IYakToken yakToken;\\r\\n\\r\\n    // Voting Power owner\\r\\n    address owner;\\r\\n    \\r\\n    // lockManager contract\\r\\n    address lockManager;\\r\\n\\r\\n    // Token registry contract\\r\\n    ITokenRegistry tokenRegistry;\\r\\n}\\r\\n\\r\\n/// @notice A checkpoint for marking number of votes from a given block\\r\\nstruct Checkpoint {\\r\\n    uint32 fromBlock;\\r\\n    uint256 votes;\\r\\n}\\r\\n\\r\\n/// @notice All storage variables related to checkpoints\\r\\nstruct CheckpointStorage {\\r\\n     // A record of vote checkpoints for each account, by index\\r\\n    mapping (address => mapping (uint32 => Checkpoint)) checkpoints;\\r\\n\\r\\n    // The number of checkpoints for each account\\r\\n    mapping (address => uint32) numCheckpoints;\\r\\n}\\r\\n\\r\\n/// @notice The amount of a given token that has been staked, and the resulting voting power\\r\\nstruct Stake {\\r\\n    uint256 amount;\\r\\n    uint256 votingPower;\\r\\n}\\r\\n\\r\\n/// @notice All storage variables related to staking\\r\\nstruct StakeStorage {\\r\\n    // Official record of staked balances for each account > token > stake\\r\\n    mapping (address => mapping (address => Stake)) stakes;\\r\\n}\\r\\n\\r\\nlibrary VotingPowerStorage {\\r\\n    bytes32 constant VOTING_POWER_APP_STORAGE_POSITION = keccak256(\\\"voting.power.app.storage\\\");\\r\\n    bytes32 constant VOTING_POWER_CHECKPOINT_STORAGE_POSITION = keccak256(\\\"voting.power.checkpoint.storage\\\");\\r\\n    bytes32 constant VOTING_POWER_STAKE_STORAGE_POSITION = keccak256(\\\"voting.power.stake.storage\\\");\\r\\n    \\r\\n    /**\\r\\n     * @notice Load app storage struct from specified VOTING_POWER_APP_STORAGE_POSITION\\r\\n     * @return app AppStorage struct\\r\\n     */\\r\\n    function appStorage() internal pure returns (AppStorage storage app) {        \\r\\n        bytes32 position = VOTING_POWER_APP_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            app.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Load checkpoint storage struct from specified VOTING_POWER_CHECKPOINT_STORAGE_POSITION\\r\\n     * @return cs CheckpointStorage struct\\r\\n     */\\r\\n    function checkpointStorage() internal pure returns (CheckpointStorage storage cs) {        \\r\\n        bytes32 position = VOTING_POWER_CHECKPOINT_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Load stake storage struct from specified VOTING_POWER_STAKE_STORAGE_POSITION\\r\\n     * @return ss StakeStorage struct\\r\\n     */\\r\\n    function stakeStorage() internal pure returns (StakeStorage storage ss) {        \\r\\n        bytes32 position = VOTING_POWER_STAKE_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ss.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1373b6de297c26e3f6778d5f44801677ed7c5e88380e5b42af62ad71797929d7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c80639cc7a367116100cd578063adc9772e11610081578063deedfdbd11610066578063deedfdbd1461028e578063ecd9ba82146102a1578063f3fef3a3146102b457610151565b8063adc9772e14610268578063c4d66de81461027b57610151565b8063a1194c8e116100b2578063a1194c8e1461023a578063a6f9dae11461024d578063acca30a21461026057610151565b80639cc7a3671461021f5780639d23c4c71461023257610151565b806370a08231116101245780637b3abeae116101095780637b3abeae146101e257806382dda22d146101f75780638da5cb5b1461021757610151565b806370a08231146101bc5780637741459e146101cf57610151565b80630bae5b7c14610156578063313ce5671461016b57806335a5af92146101895780634ee2cd7e1461019c575b600080fd5b610169610164366004611d9f565b6102c7565b005b610173610370565b6040516101809190612710565b60405180910390f35b610169610197366004611d2f565b610375565b6101af6101aa366004611d9f565b61040c565b6040516101809190612707565b6101af6101ca366004611d2f565b610603565b6101af6101dd366004611d67565b610676565b6101ea61068a565b6040516101809190611e6b565b61020a610205366004611d67565b6106a8565b60405161018091906126f0565b6101ea6106ff565b61016961022d366004611d9f565b61071d565b6101ea6107ab565b610169610248366004611d2f565b6107c9565b61016961025b366004611d2f565b610901565b6101ea610a14565b610169610276366004611d9f565b610a32565b610169610289366004611d2f565b610d78565b61016961029c366004611d2f565b610e7d565b6101696102af366004611e02565b610f14565b6101696102c2366004611d9f565b61124e565b60335460ff166102f25760405162461bcd60e51b81526004016102e99061265c565b60405180910390fd5b6033805460ff1916905560006103066112f3565b9050600082116103285760405162461bcd60e51b81526004016102e9906124e8565b60038101546001600160a01b031633146103545760405162461bcd60e51b81526004016102e9906122a9565b61035e8383611317565b50506033805460ff1916600117905550565b601290565b600061037f6112f3565b60028101549091506001600160a01b031615806103a8575060028101546001600160a01b031633145b6103c45760405162461bcd60e51b81526004016102e99061241d565b60006103ce6112f3565b60040180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0394909416939093179092555050565b600043821061042d5760405162461bcd60e51b81526004016102e990612090565b60006104376113a8565b6001600160a01b038516600090815260018201602052604090205490915063ffffffff168061046b576000925050506105fd565b6001600160a01b03851660009081526020838152604080832063ffffffff6000198601811685529252909120541684106104d8576001600160a01b0385166000908152602092835260408082206000199390930163ffffffff1682529190925290206001015490506105fd565b6001600160a01b03851660009081526020838152604080832083805290915290205463ffffffff16841015610512576000925050506105fd565b600060001982015b8163ffffffff168163ffffffff1611156105ca57600282820363ffffffff16048103610544611cfe565b506001600160a01b03881660009081526020868152604080832063ffffffff8086168552908352928190208151808301909252805490931680825260019093015491810191909152908814156105a5576020015195506105fd945050505050565b805163ffffffff168811156105bc578193506105c3565b6001820392505b505061051a565b506001600160a01b03861660009081526020938452604080822063ffffffff909316825291909352909120600101549150505b92915050565b60008061060e6113a8565b6001600160a01b038416600090815260018201602052604090205490915063ffffffff168061063e57600061066e565b6001600160a01b03841660009081526020838152604080832063ffffffff60001986011684529091529020600101545b949350505050565b600061068283836106a8565b519392505050565b6000806106956112f3565b600101546001600160a01b031691505090565b6106b0611d15565b60006106ba6113cc565b6001600160a01b038086166000908152602092835260408082209287168252918352819020815180830190925280548252600101549181019190915291505092915050565b60008061070a6112f3565b600201546001600160a01b031691505090565b60335460ff1661073f5760405162461bcd60e51b81526004016102e99061265c565b6033805460ff1916905560006107536112f3565b9050600082116107755760405162461bcd60e51b81526004016102e990612545565b60038101546001600160a01b031633146107a15760405162461bcd60e51b81526004016102e9906123c0565b61035e83836113f0565b6000806107b66112f3565b600401546001600160a01b031691505090565b806001600160a01b0316633e47158c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561080257600080fd5b505afa158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a9190611d4b565b6001600160a01b0316336001600160a01b03161461086a5760405162461bcd60e51b81526004016102e990611f9f565b806001600160a01b03166394d8fbd06040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156108a557600080fd5b505af11580156108b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dd9190611dca565b15156001146108fe5760405162461bcd60e51b81526004016102e990612363565b50565b600061090b6112f3565b60028101549091506001600160a01b03161580610934575060028101546001600160a01b031633145b6109505760405162461bcd60e51b81526004016102e99061241d565b6001600160a01b0382161580159061097157506001600160a01b0382163014155b61098d5760405162461bcd60e51b81526004016102e9906121b8565b60006109976112f3565b60028101546040519192506001600160a01b03808616929116907f2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e90600090a360020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03939093169290921790915550565b600080610a1f6112f3565b600301546001600160a01b031691505090565b60335460ff16610a545760405162461bcd60e51b81526004016102e99061265c565b6033805460ff191690558181610a7c5760405162461bcd60e51b81526004016102e990611f68565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815282906001600160a01b038316906370a0823190610ac3903390600401611e6b565b60206040518083038186803b158015610adb57600080fd5b505afa158015610aef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b139190611dea565b1015610b315760405162461bcd60e51b81526004016102e9906120ed565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815282906001600160a01b0383169063dd62ed3e90610b7a9033903090600401611e7f565b60206040518083038186803b158015610b9257600080fd5b505afa158015610ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bca9190611dea565b1015610be85760405162461bcd60e51b81526004016102e9906125ff565b6000610bf26112f3565b6004808201546040517fd419935f0000000000000000000000000000000000000000000000000000000081529293506000926001600160a01b039091169163d419935f91610c4291899101611e6b565b60206040518083038186803b158015610c5a57600080fd5b505afa158015610c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c929190611d4b565b90506001600160a01b038116610cba5760405162461bcd60e51b81526004016102e990612215565b6040517fb69fb7f900000000000000000000000000000000000000000000000000000000815281906000906001600160a01b0383169063b69fb7f990610d04908990600401612707565b60206040518083038186803b158015610d1c57600080fd5b505afa158015610d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d549190611dea565b9050610d623388888461146b565b50506033805460ff191660011790555050505050565b600054610100900460ff1680610d915750610d91611569565b80610d9f575060005460ff16155b610dbb5760405162461bcd60e51b81526004016102e990612306565b600054610100900460ff16158015610e03576000805460ff197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b610e0b61156f565b6000610e156112f3565b60010180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038516179055508015610e7957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6000610e876112f3565b60028101549091506001600160a01b03161580610eb0575060028101546001600160a01b031633145b610ecc5760405162461bcd60e51b81526004016102e99061241d565b6000610ed66112f3565b60030180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0394909416939093179092555050565b60335460ff16610f365760405162461bcd60e51b81526004016102e99061265c565b6033805460ff1916905584610f5d5760405162461bcd60e51b81526004016102e99061215b565b6000610f676112f3565b60018101546040517f70a0823100000000000000000000000000000000000000000000000000000000815291925087916001600160a01b03909116906370a0823190610fb7903390600401611e6b565b60206040518083038186803b158015610fcf57600080fd5b505afa158015610fe3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110079190611dea565b10156110255760405162461bcd60e51b81526004016102e990611ffc565b60018101546040517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063d505accf9061107c90339030908b908b908b908b908b90600401611e99565b600060405180830381600087803b15801561109657600080fd5b505af11580156110aa573d6000803e3d6000fd5b50505060048083015460018401546040517fd419935f000000000000000000000000000000000000000000000000000000008152600094506001600160a01b039283169363d419935f9361110093169101611e6b565b60206040518083038186803b15801561111857600080fd5b505afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111509190611d4b565b90506001600160a01b0381166111785760405162461bcd60e51b81526004016102e990612215565b60018201546040517fb69fb7f90000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690600090829063b69fb7f9906111c8908c90600401612707565b60206040518083038186803b1580156111e057600080fd5b505afa1580156111f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112189190611dea565b60018501549091506112369033906001600160a01b03168b8461146b565b50506033805460ff1916600117905550505050505050565b60335460ff166112705760405162461bcd60e51b81526004016102e99061265c565b6033805460ff19169055806112975760405162461bcd60e51b81526004016102e990612124565b61129f611d15565b6112a933846106a8565b905060006112d282600001516112cc84602001518661163890919063ffffffff16565b90611679565b90506112e0338585846116bb565b50506033805460ff191660011790555050565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2090565b60006113216113a8565b6001600160a01b038416600090815260018201602052604081205491925063ffffffff9091169081611354576000611384565b6001600160a01b03851660009081526020848152604080832063ffffffff60001987011684529091529020600101545b905060006113928286611841565b90506113a086848484611866565b505050505050565b7f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf190565b7fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da09890565b60006113fa6113a8565b6001600160a01b038416600090815260018201602052604081205491925063ffffffff909116908161142d57600061145d565b6001600160a01b03851660009081526020848152604080832063ffffffff60001987011684529091529020600101545b9050600061139282866119e4565b6114806001600160a01b038416853085611a26565b600061148a6113cc565b6001600160a01b03808716600090815260208381526040808320938916835292905220549091506114bb9084611841565b6001600160a01b03868116600090815260208481526040808320938916835292905220908155600101546114ef9083611841565b6001600160a01b03808716600081815260208581526040808320948a1680845294909152908190206001019390935591518592907f6c86f3fd5118b3aa8bb4f389a617046de0a3d3d477de1a1673d227f802f616dc90611550908790612707565b60405180910390a46115628583611317565b5050505050565b303b1590565b600054610100900460ff16806115885750611588611569565b80611596575060005460ff16155b6115b25760405162461bcd60e51b81526004016102e990612306565b600054610100900460ff161580156115fa576000805460ff197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909116610100171660011790555b6033805460ff1916600117905580156108fe57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600082611647575060006105fd565b8282028284828161165457fe5b04146116725760405162461bcd60e51b81526004016102e99061224c565b9392505050565b600061167283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611acf565b60006116c56113cc565b6001600160a01b038087166000908152602083815260408083209389168352929052205490915083111561170b5760405162461bcd60e51b81526004016102e990612454565b6001600160a01b03808616600090815260208381526040808320938816835292905220600101548211156117515760405162461bcd60e51b81526004016102e990612693565b6001600160a01b038086166000908152602083815260408083209388168352929052205461177f90846119e4565b6001600160a01b03868116600090815260208481526040808320938916835292905220908155600101546117b390836119e4565b6001600160a01b03808716600090815260208481526040808320938916808452939091529020600101919091556117eb908685611b06565b82846001600160a01b0316866001600160a01b03167f91fb9d98b786c57d74c099ccd2beca1739e9f6a81fb49001ca465c4b7591bbe28560405161182f9190612707565b60405180910390a461156285836113f0565b6000828201838110156116725760405162461bcd60e51b81526004016102e990612059565b600061188a4360405180606001604052806032815260200161276060329139611b2a565b905060006118966113a8565b905060008563ffffffff161180156118dd57506001600160a01b03861660009081526020828152604080832063ffffffff6000198a01811685529252909120548382169116145b15611918576001600160a01b03861660009081526020828152604080832063ffffffff6000198a0116845290915290206001018390556119a4565b60408051808201825263ffffffff808516825260208083018781526001600160a01b038b1660008181528784528681208c861682528452868120955186549086167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000091821617875592516001968701559081528487019092529390208054928901909116919092161790555b8284876001600160a01b03167f53ed7954de66613e30dd29b46ab783aa594e6309d021d8854c76bb3325d03aa360405160405180910390a4505050505050565b600061167283836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250611b5a565b611ac9846323b872dd60e01b858585604051602401611a4793929190611eda565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b86565b50505050565b60008183611af05760405162461bcd60e51b81526004016102e99190611f17565b506000838581611afc57fe5b0495945050505050565b611b258363a9059cbb60e01b8484604051602401611a47929190611efe565b505050565b6000816401000000008410611b525760405162461bcd60e51b81526004016102e99190611f17565b509192915050565b60008184841115611b7e5760405162461bcd60e51b81526004016102e99190611f17565b505050900390565b6060611bdb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c159092919063ffffffff16565b805190915015611b255780806020019051810190611bf99190611dca565b611b255760405162461bcd60e51b81526004016102e9906125a2565b606061066e848460008585611c2985611cbf565b611c455760405162461bcd60e51b81526004016102e9906124b1565b60006060866001600160a01b03168587604051611c629190611e4f565b60006040518083038185875af1925050503d8060008114611c9f576040519150601f19603f3d011682016040523d82523d6000602084013e611ca4565b606091505b5091509150611cb4828286611cc5565b979650505050505050565b3b151590565b60608315611cd4575081611672565b825115611ce45782518084602001fd5b8160405162461bcd60e51b81526004016102e99190611f17565b604080518082019091526000808252602082015290565b604051806040016040528060008152602001600081525090565b600060208284031215611d40578081fd5b81356116728161274a565b600060208284031215611d5c578081fd5b81516116728161274a565b60008060408385031215611d79578081fd5b8235611d848161274a565b91506020830135611d948161274a565b809150509250929050565b60008060408385031215611db1578182fd5b8235611dbc8161274a565b946020939093013593505050565b600060208284031215611ddb578081fd5b81518015158114611672578182fd5b600060208284031215611dfb578081fd5b5051919050565b600080600080600060a08688031215611e19578081fd5b8535945060208601359350604086013560ff81168114611e37578182fd5b94979396509394606081013594506080013592915050565b60008251611e6181846020870161271e565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152611f3681604085016020870161271e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526019908201527f56503a3a7374616b653a2063616e6e6f74207374616b65203000000000000000604082015260600190565b60208082526039908201527f507269736d3a3a6265636f6d653a206f6e6c792070726f78792061646d696e2060408201527f63616e206368616e676520696d706c656d656e746174696f6e00000000000000606082015260800190565b60208082526026908201527f56503a3a7374616b65576974685065726d69743a206e6f7420656e6f7567682060408201527f746f6b656e730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526023908201527f56503a3a62616c616e63654f6641743a206e6f74207965742064657465726d6960408201527f6e65640000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f56503a3a7374616b653a206e6f7420656e6f75676820746f6b656e7300000000604082015260600190565b6020808252601f908201527f56503a3a77697468647261773a2063616e6e6f74207769746864726177203000604082015260600190565b60208082526023908201527f56503a3a7374616b65576974685065726d69743a2063616e6e6f74207374616b60408201527f6520300000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f56503a3a6368616e67654f776e65723a206e6f742076616c696420616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f56503a3a7374616b653a20746f6b656e206e6f7420737570706f727465640000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f56503a3a6164645650666f724c543a206f6e6c79206c6f636b4d616e6167657260408201527f20636f6e74726163740000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201527f656e20696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526024908201527f507269736d3a3a6265636f6d653a206368616e6765206e6f7420617574686f7260408201527f697a656400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f56503a3a72656d6f76655650666f7255543a206f6e6c79206c6f636b4d616e6160408201527f67657220636f6e74726163740000000000000000000000000000000000000000606082015260800190565b6020808252600a908201527f6f6e6c79206f776e657200000000000000000000000000000000000000000000604082015260600190565b60208082526027908201527f56503a3a5f77697468647261773a206e6f7420656e6f75676820746f6b656e7360408201527f207374616b656400000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526029908201527f56503a3a6164645650666f724c543a2063616e6e6f7420616464203020766f7460408201527f696e6720706f7765720000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f56503a3a72656d6f76655650666f7255543a2063616e6e6f742072656d6f766560408201527f203020766f74696e6720706f7765720000000000000000000000000000000000606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252602d908201527f56503a3a7374616b653a206d75737420617070726f766520746f6b656e73206260408201527f65666f7265207374616b696e6700000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526026908201527f56503a3a5f77697468647261773a206e6f7420656e6f75676820766f74696e6760408201527f20706f7765720000000000000000000000000000000000000000000000000000606082015260800190565b815181526020918201519181019190915260400190565b90815260200190565b60ff91909116815260200190565b60005b83811015612739578181015183820152602001612721565b83811115611ac95750506000910152565b6001600160a01b03811681146108fe57600080fdfe56503a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473a2646970667358221220948b67fbc63555c4acb7c215445de595b5a42a91e2994db6eb6d15122faafa7d64736f6c63430007030033",
  "devdoc": {
    "details": "Implementation contract for voting power prism proxy Calls should not be made directly to this contract, instead make calls to the VotingPowerPrism proxy contract The exception to this is the `become` function specified in PrismProxyImplementation  This function is called once and is used by this contract to accept its role as the implementation for the prism proxy",
    "kind": "dev",
    "methods": {
      "addVotingPowerForLockedTokens(address,uint256)": {
        "params": {
          "account": "The recipient of voting power",
          "amount": "The amount of voting power to add"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "balanceOfAt(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "become(address)": {
        "params": {
          "prism": "Prism Proxy contract"
        }
      },
      "changeOwner(address)": {
        "params": {
          "newOwner": "New owner address"
        }
      },
      "decimals()": {
        "returns": {
          "_0": "decimals"
        }
      },
      "getAmountStaked(address,address)": {
        "params": {
          "stakedToken": "The staked token",
          "staker": "The user with staked tokens"
        },
        "returns": {
          "_0": "total amount staked"
        }
      },
      "getStake(address,address)": {
        "params": {
          "stakedToken": "The staked token",
          "staker": "The user with staked tokens"
        },
        "returns": {
          "_0": "total staked"
        }
      },
      "initialize(address)": {
        "details": "Should be called via VotingPowerPrism before calling anything else",
        "params": {
          "_yakToken": "address of YAK token"
        }
      },
      "lockManager()": {
        "returns": {
          "_0": "Address of lockManager"
        }
      },
      "owner()": {
        "returns": {
          "_0": "Address of owner"
        }
      },
      "removeVotingPowerForUnlockedTokens(address,uint256)": {
        "params": {
          "account": "The account with voting power",
          "amount": "The amount of voting power to remove"
        }
      },
      "setLockManager(address)": {
        "params": {
          "newLockManager": "Address of lockManager"
        }
      },
      "setTokenRegistry(address)": {
        "params": {
          "registry": "Address of token registry"
        }
      },
      "stake(address,uint256)": {
        "params": {
          "amount": "The amount to stake",
          "token": "The token to stake"
        }
      },
      "stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "The amount to stake",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "tokenRegistry()": {
        "returns": {
          "_0": "Address of token registry"
        }
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "The amount to withdraw",
          "token": "The token to withdraw"
        }
      },
      "yakToken()": {
        "returns": {
          "_0": "Address of YAK token"
        }
      }
    },
    "title": "VotingPower",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ChangedOwner(address,address)": {
        "notice": "Event emitted when the owner of the voting power contract is updated"
      },
      "Staked(address,address,uint256,uint256)": {
        "notice": "An event that's emitted when a user's staked balance increases"
      },
      "VotingPowerChanged(address,uint256,uint256)": {
        "notice": "An event that's emitted when an account's vote balance changes"
      },
      "Withdrawn(address,address,uint256,uint256)": {
        "notice": "An event that's emitted when a user's staked balance decreases"
      }
    },
    "kind": "user",
    "methods": {
      "addVotingPowerForLockedTokens(address,uint256)": {
        "notice": "Count locked tokens toward voting power for `account`"
      },
      "balanceOf(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "balanceOfAt(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "become(address)": {
        "notice": "Accept invitation to be implementation contract for proxy"
      },
      "changeOwner(address)": {
        "notice": "Change owner of the contract"
      },
      "decimals()": {
        "notice": "Decimals used for voting power"
      },
      "getAmountStaked(address,address)": {
        "notice": "Get total amount of tokens staked in contract by `staker`"
      },
      "getStake(address,address)": {
        "notice": "Get total staked amount and voting power from `stakedToken` staked in contract by `staker`"
      },
      "initialize(address)": {
        "notice": "Initialize VotingPower contract"
      },
      "lockManager()": {
        "notice": "Address of lockManager"
      },
      "owner()": {
        "notice": "Address of owner"
      },
      "removeVotingPowerForUnlockedTokens(address,uint256)": {
        "notice": "Remove unlocked tokens from voting power for `account`"
      },
      "setLockManager(address)": {
        "notice": "Sets lockManager address"
      },
      "setTokenRegistry(address)": {
        "notice": "Sets token registry address"
      },
      "stake(address,uint256)": {
        "notice": "Stake LP tokens to unlock voting power for `msg.sender`"
      },
      "stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Stake YAK tokens using offchain approvals to unlock voting power"
      },
      "tokenRegistry()": {
        "notice": "Address of token registry"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw staked LP tokens, removing voting power for `msg.sender`"
      },
      "yakToken()": {
        "notice": "Address of YAK token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8097,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8100,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8165,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8740,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "_notEntered",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 8781,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}